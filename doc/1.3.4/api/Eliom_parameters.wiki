=Module <<a_api_type | module Eliom_parameters >> =
<<div class="code"|<<span class="keyword"|module>> Eliom_parameters: <<span class='code'|sig>><<a_api text=".." | module Eliom_parameters >><<span class='code'|end>>>>~This module defines the values used to declare the type of service
   parameters~.\\

----
\\
~Here are some examples of how to specify the types and names of
   service parameters~:* <<span class='code'|unit>> for a service without parameter~.
* <<span class='code'|~(int "myvalue"~)>> for a service that takes one parameter~,
   of type <<span class='code'|int>>~, called <<span class='code'|"myvalue">>~.
   ~(~The service handler function takes a parameter of type <<span class='code'|int>>~)~.
* <<span class='code'|~(int "myvalue" ~*~* string "mystring"~)>> for a service that takes
   two parameters~, one of type <<span class='code'|int>> called <<span class='code'|"myvalue">>~,
   and one of type <<span class='code'|string>> called <<span class='code'|"mystring">>~.
   ~(~The service handler function takes a parameter of type <<span class='code'|~(int ~* string~)>>~)~.
* <<span class='code'|~(opt ~(int "myvalue"~)~)>> for a service that takes an optional parameter
   of type <<span class='code'|int>> called <<span class='code'|"myvalue">>~.
   ~(~The handler function takes a parameter of type <<span class='code'|int option>>~)~.
* <<span class='code'|~(set int "myvalue"~)>> for a service that takes any number of integer
   parameters~, all called <<span class='code'|"myvalue">>~.
   ~(~The handler function takes a parameter of type <<span class='code'|int list>>~)~.
* <<span class='code'|list "l" ~(int "myvalue" ~*~* string "mystring"~)>> for a service
   taking a list of pairs~.
   ~(~The handler takes a parameter of type <<span class='code'|~(int ~* string~) list>>~)~.


~Note~: ~We could make even more static checking in parameter~'s types ~(for example
to forbid <<span class='code'|any>> in suffixes~)~, but it would make the types of parameters and
services more complicated~. ~We believe that these errors should be easy
to find during implementation~.\\
\\

==@@id="2_Typesusedbythemodule"@@~Types used by the module==
\\
<<div class="code" id="TYPEparams_type"|<<span class="keyword"|type>> <<span class="code type"|('a, +'b, +'c)>> params~_type>>
<<div class="info"|~Type for parameters of a web page~.* <<span class='code'| ~'typ>> is the type of the parameter ~(taken by the service handler~)
* <<span class='code'| ~'suff>> is a polymorphic variant type telling the type of parameter
   ~(suffix or not ~.~.~.~)
* <<span class='code'| ~'name>> is the type of the parameter name ~(usually using <<a_api | type Eliom_parameters.param_name >>~)

\\
>>

<<div class="code" id="TYPEparam_name"|<<span class="keyword"|type>> <<span class="code type"|'a>> param~_name>>
<<div class="info"|~Type for names of page parameters ~(given to the functions
   to construct forms~, for example in <<a_api | val Eliom_predefmod.XHTMLFORMSSIG.get_form >>~)~.
   ~The names of parameters are not just strings to enforce using
   forms widgets with the right parameter type~.
   ~The parameter of that type is often a subtype of the polymorphic variant
   type <<span class='code'|~[ `~Set of ~'a ~| `~One of ~'a ~| `~Opt of ~'a ~]>>~, where* <<span class='code'|`~Set of ~'a>> means~: any number of <<span class='code'|~'a>>
* <<span class='code'|`~One of ~'a>> means~: exactly one <<span class='code'|~'a>>
* <<span class='code'|`~Opt of ~'a>> means~: zero or one <<span class='code'|~'a>>

\\
>>

<<div class="code" id="TYPEsetoneradio"|<<span class="keyword"|type>> <<span class="code type"|'a>> setoneradio = <<span class="code type"|[ `One of 'a | `Radio of 'a | `Set of 'a ]>> >>
<<div class="info"|~This type is used by some form widgets like
   <<a_api | val Eliom_predefmod.XHTMLFORMSSIG.int_input >> that may be used against services
   expecting one parameter of that name~,
   or services expecting an optional parameter of that name~,
   or services expecting any number of parameters of that name~.\\
>>

<<div class="code" id="TYPEoneradio"|<<span class="keyword"|type>> <<span class="code type"|'a>> oneradio = <<span class="code type"|[ `One of 'a | `Radio of 'a ]>> >>
<<div class="info"|~This type is used by some form widgets like
   <<a_api | val Eliom_predefmod.XHTMLFORMSSIG.int_image_input >> that may be used against services
   expecting one parameter of that name
   or services expecting an optional parameter of that name~.\\
>>

<<div class="code" id="TYPEsetone"|<<span class="keyword"|type>> <<span class="code type"|'a>> setone = <<span class="code type"|[ `One of 'a | `Set of 'a ]>> >>
<<div class="info"|~This type is used by some form widgets like
   <<a_api | val Eliom_predefmod.XHTMLFORMSSIG.int_button >> that may be used against services
   expecting one parameter of that name~,
   or services expecting any number of parameters of that name~.\\
>>

<<div class="code" id="TYPEbinsum"|<<span class="keyword"|type>> <<span class="code type"|('a, 'b)>> binsum = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Inj1>> <<span class="keyword"|of>> <<span class="code type"|'a>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Inj2>> <<span class="keyword"|of>> <<span class="code type"|'b>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Type used for parameters of type bynary sum|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|>>

<<div class="code" id="TYPElistnames"|<<span class="keyword"|type>> <<span class="code type"|'a>> listnames = { 
|@@class="typetable"@ @class="lefttop"@@{{{   }}}|@@class="lefttop"@@it : <<span class="code type"|'b 'c. ('a -> 'b -> 'c -> 'c) -> 'b list -> 'c -> 'c>>;|

}
>>
<<div class="info"|~Type of the iterator used to construct forms from lists\\
>>

\\

==@@id="2_Basictypesofpagesparameters"@@~Basic types of pages parameters==
\\
<<div id="VALint" class="code"|<<span class="keyword"|val>> int : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (int, [ `WithoutSuffix ], [ `One of int ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|<<span class='code'|int s>> tells that the service takes an integer as parameter~, labeled <<span class='code'|s>>~.\\
>>
<<div id="VALint32" class="code"|<<span class="keyword"|val>> int~3~2 : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (int32, [ `WithoutSuffix ], [ `One of int32 ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|<<span class='code'|int~3~2 s>> tells that the service takes a ~3~2 bits integer as parameter~, labeled <<span class='code'|s>>~.\\
>>
<<div id="VALint64" class="code"|<<span class="keyword"|val>> int~6~4 : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (int64, [ `WithoutSuffix ], [ `One of int64 ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|<<span class='code'|int~6~4 s>> tells that the service takes a ~6~4 bits integer as parameter~, labeled <<span class='code'|s>>~.\\
>>
<<div id="VALfloat" class="code"|<<span class="keyword"|val>> float : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (float, [ `WithoutSuffix ], [ `One of float ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|<<span class='code'|float s>> tells that the service takes a floating point number as parameter~, labeled <<span class='code'|s>>~.\\
>>
<<div id="VALstring" class="code"|<<span class="keyword"|val>> string : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (string, [ `WithoutSuffix ], [ `One of string ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|<<span class='code'|string s>> tells that the service takes a string as parameter~, labeled <<span class='code'|s>>~.\\
>>
<<div id="VALbool" class="code"|<<span class="keyword"|val>> bool : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (bool, [ `WithoutSuffix ], [ `One of bool ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|<<span class='code'|bool s>> tells that the service takes a boolean as parameter~, labeled <<span class='code'|s>>~.
   ~(to use for example with boolean checkboxes~)\\
>>
<<div id="VALfile" class="code"|<<span class="keyword"|val>> file : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (Ocsigen_lib.file_info, [ `WithoutSuffix ],\\{{{   }}}   [ `One of Ocsigen_lib.file_info ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|<<span class='code'|file s>> tells that the service takes a file as parameter~, labeled <<span class='code'|s>>~.\\
>>
<<div id="VALunit" class="code"|<<span class="keyword"|val>> unit : <<span class="code type"|(unit, [ `WithoutSuffix ], unit) <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|used for services that don~'t have any parameters\\
>>
<<div id="VALuser_type" class="code"|<<span class="keyword"|val>> user~_type : <<span class="code type"|\\{{{   }}}of_string:(string -> 'a) ->\\{{{   }}}  to_string:('a -> string) ->\\{{{   }}}  string ->\\{{{   }}}  ('a, [ `WithoutSuffix ], [ `One of 'a ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Allows to use whatever type you want for a parameter of the service~.
   <<span class='code'|user~_type t~_of~_string string~_of~_t s>> tells that the service take a parameter~, labeled <<span class='code'|s>>~, and that the server will have to use <<span class='code'|t~_of~_string>> and <<span class='code'|string~_of~_t>> to make the conversion from and to string~.\\
>>
<<div class="code" id="TYPEcoordinates"|<<span class="keyword"|type>> coordinates = { 
|@@class="typetable"@ @class="lefttop"@@{{{   }}}|@@class="lefttop"@@abscissa : <<span class="code type"|int>>;|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ordinate : <<span class="code type"|int>>;|

}
>>
<<div class="info"|<<span class='code'|coordinates>> is for the data sent by an <<span class='code'|~<input type~="image" ~.~.~.~>>>~.\\
>>

<<div id="VALcoordinates" class="code"|<<span class="keyword"|val>> coordinates : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (<<a_api text="coordinates" | type Eliom_parameters.coordinates >>, [ `WithoutSuffix ],\\{{{   }}}   [ `One of <<a_api text="coordinates" | type Eliom_parameters.coordinates >> ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|<<span class='code'|string s>> tells that the service takes as parameters the coordinates
   of the point where the user were clicked on an image~.\\
>>
<<div id="VALstring_coordinates" class="code"|<<span class="keyword"|val>> string~_coordinates : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (string * <<a_api text="coordinates" | type Eliom_parameters.coordinates >>, [ `WithoutSuffix ],\\{{{   }}}   [ `One of string * <<a_api text="coordinates" | type Eliom_parameters.coordinates >> ]\\{{{   }}}   <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~It is possible to send a value together with the coordinates
   ~(<<span class='code'|~<input type~="image" value~="~.~.~." ~.~.~.~>>>~) ~(~Here a string~)\\
>>
<<div id="VALint_coordinates" class="code"|<<span class="keyword"|val>> int~_coordinates : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (int * <<a_api text="coordinates" | type Eliom_parameters.coordinates >>, [ `WithoutSuffix ],\\{{{   }}}   [ `One of int * <<a_api text="coordinates" | type Eliom_parameters.coordinates >> ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Same for an integer value\\
>>
<<div id="VALint32_coordinates" class="code"|<<span class="keyword"|val>> int~3~2~_coordinates : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (int32 * <<a_api text="coordinates" | type Eliom_parameters.coordinates >>, [ `WithoutSuffix ],\\{{{   }}}   [ `One of int32 * <<a_api text="coordinates" | type Eliom_parameters.coordinates >> ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Same for a ~3~2 bits integer value\\
>>
<<div id="VALint64_coordinates" class="code"|<<span class="keyword"|val>> int~6~4~_coordinates : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (int64 * <<a_api text="coordinates" | type Eliom_parameters.coordinates >>, [ `WithoutSuffix ],\\{{{   }}}   [ `One of int64 * <<a_api text="coordinates" | type Eliom_parameters.coordinates >> ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Same for a ~6~4 integer value\\
>>
<<div id="VALfloat_coordinates" class="code"|<<span class="keyword"|val>> float~_coordinates : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (float * <<a_api text="coordinates" | type Eliom_parameters.coordinates >>, [ `WithoutSuffix ],\\{{{   }}}   [ `One of float * <<a_api text="coordinates" | type Eliom_parameters.coordinates >> ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Same for a float value\\
>>
<<div id="VALuser_type_coordinates" class="code"|<<span class="keyword"|val>> user~_type~_coordinates : <<span class="code type"|\\{{{   }}}of_string:(string -> 'a) ->\\{{{   }}}  to_string:('a -> string) ->\\{{{   }}}  string ->\\{{{   }}}  ('a * <<a_api text="coordinates" | type Eliom_parameters.coordinates >>, [ `WithoutSuffix ],\\{{{   }}}   [ `One of 'a * <<a_api text="coordinates" | type Eliom_parameters.coordinates >> ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Same for a value of your own type\\
>>
\\

==@@id="2_Composingtypesofpagesparameters"@@~Composing types of pages parameters==
\\
<<div id="VAL( ** )" class="code"|<<span class="keyword"|val>> ~( ~*~* ~) : <<span class="code type"|\\{{{   }}}('a, [ `WithoutSuffix ], 'b) <<a_api text="params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ('c, [< `Endsuffix | `WithoutSuffix ] as 'd, 'e) <<a_api text="params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ('a * 'c, 'd, 'b * 'e) <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~This is a combinator to allow the service to take several parameters
   ~(see examples above~)
   //~Warning~: it is a binary operator~.
   ~Pages cannot take tuples but only pairs~.//\\
>>
<<div id="VALprod" class="code"|<<span class="keyword"|val>> prod : <<span class="code type"|\\{{{   }}}('a, [ `WithoutSuffix ], 'b) <<a_api text="params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ('c, [< `Endsuffix | `WithoutSuffix ] as 'd, 'e) <<a_api text="params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ('a * 'c, 'd, 'b * 'e) <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Same as <<span class='code'|~*~*>> above\\
>>
<<div id="VALsum" class="code"|<<span class="keyword"|val>> sum : <<span class="code type"|\\{{{   }}}('a, [ `WithoutSuffix ], 'b) <<a_api text="params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ('c, [ `WithoutSuffix ], 'd) <<a_api text="params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  (('a, 'c) <<a_api text="binsum" | type Eliom_parameters.binsum >>, [ `WithoutSuffix ], 'b * 'd)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~This is a combinator to allow the service to take either a parameter
   or another one
   //~Warning~: it is a binary operator~.//\\
>>
<<div id="VALopt" class="code"|<<span class="keyword"|val>> opt : <<span class="code type"|\\{{{   }}}('a, [ `WithoutSuffix ], 'b) <<a_api text="params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ('a option, [ `WithoutSuffix ], 'b) <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Use this if you want one or some parameters to be optional\\
>>
<<div id="VALradio" class="code"|<<span class="keyword"|val>> radio : <<span class="code type"|\\{{{   }}}(string ->\\{{{   }}}   ('a, [ `WithoutSuffix ], [ `One of 'b ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}   <<a_api text="params_type" | type Eliom_parameters.params_type >>) ->\\{{{   }}}  string ->\\{{{   }}}  ('a option, [ `WithoutSuffix ], [ `Radio of 'b ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Use this if you want to use this parameter with a radio button~.
    ~It is equivalent to <<span class='code'|opt>> but works only for one single parameter~.\\
>>
<<div id="VALany" class="code"|<<span class="keyword"|val>> any : <<span class="code type"|\\{{{   }}}((string * string) list, [ `WithoutSuffix ], unit)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Use this if you want to take any parameters~.
   ~The service will answer to all the request~,
   and get all parameters as an association list of strings~.\\
>>
<<div id="VALset" class="code"|<<span class="keyword"|val>> set : <<span class="code type"|\\{{{   }}}(string ->\\{{{   }}}   ('a, [ `WithoutSuffix ], [ `One of 'b ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}   <<a_api text="params_type" | type Eliom_parameters.params_type >>) ->\\{{{   }}}  string ->\\{{{   }}}  ('a list, [ `WithoutSuffix ], [ `Set of 'b ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Use this if you want your service to take several parameters
   with the same name~. ~The service handler will receive a list of values~.
   ~To create the form~, just use the same name several times~.
   ~For example <<span class='code'|set int "i">> will match the parameter string
   <<span class='code'|i~=~4~&i~=~2~2~&i~=~1~1~1>> and send to the service handler a list containing
   the three integers ~4~, ~2~2 and ~1~1~1~. ~The order is unspecified~.\\
>>
<<div id="VALlist" class="code"|<<span class="keyword"|val>> list : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  ('a, [ `WithoutSuffix ], 'b) <<a_api text="params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ('a list, [ `WithoutSuffix ], 'b <<a_api text="listnames" | type Eliom_parameters.listnames >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~The service takes a list of parameters~.
   ~The first parameter of this function is the name of the list~.
   ~The service handler will receive a list of values~.
   ~To create the form~, an iterator of type <<a_api | type Eliom_parameters.listnames >> is given to
   generate the name for each value~.\\
>>
<<div id="VALregexp" class="code"|<<span class="keyword"|val>> regexp : <<span class="code type"|\\{{{   }}}Netstring_pcre.regexp ->\\{{{   }}}  string ->\\{{{   }}}  to_string:(string -> string) ->\\{{{   }}}  string ->\\{{{   }}}  (string, [ `WithoutSuffix ], [ `One of string ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|<<span class='code'|regexp r d s>> tells that the service takes a string
   that matches the regular expression <<span class='code'|r>> as parameter~,
   labeled <<span class='code'|s>>~, and that will be rewritten in d~.
   ~The syntax of regexp is ~P~C~R~E~'s one ~(uses <<span class='code'|~Netstring~_pcre>>~, from ~O~Camlnet~)~.
   ~For example~: <<span class='code'|regexp ~(~Netstring~_pcre~.regexp "~\~[~(~.~* ~)~\~]"~) "~(~$~1~)" "myparam">>
   will match the parameter <<span class='code'|myparam~=~[hello~]>> and send the string <<span class='code'|"~(hello~)">> to
   the service handler~.\\
>>
<<div id="VALsuffix" class="code"|<<span class="keyword"|val>> suffix : <<span class="code type"|\\{{{   }}}?redirect_if_not_suffix:bool ->\\{{{   }}}  ('a, [< `Endsuffix | `WithoutSuffix ], 'b) <<a_api text="params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ('a, [ `WithSuffix ], 'b) <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Tells that the parameter of the service handler is
    the suffix of the ~U~R~L of the current service~.
    e~.g~. <<span class='code'|suffix ~(int "i" ~*~* string "s"~)>> will match an ~U~R~L ending by <<span class='code'|~3~8~0~/yo>>~.
    and send <<span class='code'|~(~3~8~0~, "yo"~)>> to the service handler~.\\


    ~For each service with suffix~, there is also a service with regular
    parameters ~(without suffix~) that will be used if you create a form
    towards a service with suffix~.
    ~If <<span class='code'|redirect~_if~_not~_suffix>> is <<span class='code'|true>> ~(default~)~,
    this service without suffix will be redirected to the suffix version~.\\
>>
<<div id="VALall_suffix" class="code"|<<span class="keyword"|val>> all~_suffix : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (string list, [ `Endsuffix ],\\{{{   }}}   [ `One of string list ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Takes all the suffix~, as long as possible~, as a ~(slash separated~)
   string list\\
>>
<<div id="VALall_suffix_string" class="code"|<<span class="keyword"|val>> all~_suffix~_string : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (string, [ `Endsuffix ], [ `One of string ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Takes all the suffix~, as long as possible~, as a string\\
>>
<<div id="VALall_suffix_user" class="code"|<<span class="keyword"|val>> all~_suffix~_user : <<span class="code type"|\\{{{   }}}of_string:(string -> 'a) ->\\{{{   }}}  to_string:('a -> string) ->\\{{{   }}}  string ->\\{{{   }}}  ('a, [ `Endsuffix ], [ `One of 'a ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Takes all the suffix~, as long as possible~,
        with a type specified by the user~.\\
>>
<<div id="VALall_suffix_regexp" class="code"|<<span class="keyword"|val>> all~_suffix~_regexp : <<span class="code type"|\\{{{   }}}Netstring_pcre.regexp ->\\{{{   }}}  string ->\\{{{   }}}  to_string:(string -> string) ->\\{{{   }}}  string ->\\{{{   }}}  (string, [ `Endsuffix ], [ `One of string ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|<<span class='code'|all~_suffix~_regexp r d s>> takes all the suffix~, as long as possible~,
   matching the regular expression <<span class='code'|r>>~, name <<span class='code'|s>>~, and rewrite it in <<span class='code'|d>>~.\\
>>
<<div id="VALsuffix_prod" class="code"|<<span class="keyword"|val>> suffix~_prod : <<span class="code type"|\\{{{   }}}?redirect_if_not_suffix:bool ->\\{{{   }}}  ('a, [< `Endsuffix | `WithoutSuffix ], 'b) <<a_api text="params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ('c, [ `WithoutSuffix ], 'd) <<a_api text="params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ('a * 'c, [ `WithSuffix ], 'b * 'd) <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|~Tells that the function that will generate the service takes
   a pair whose first element is the suffix of the ~U~R~L of the current service~,
   and the second element corresponds to other ~(regular~) parameters~.
   e~.g~.~: <<span class='code'|suffix~_prod ~(int "suff" ~*~* all~_suffix "endsuff"~) ~(int "i"~)>>
   will match an ~U~R~L ending by <<span class='code'|~7~7~7~/go~/go~/go~?i~=~3~2~0>> and send the value
   <<span class='code'|~(~(~7~7~7~, ~["go"~;"go"~;"go"~]~)~, ~3~2~0~)>> to the service handler~.\\
>>
<<div id="VALsuffix_const" class="code"|<<span class="keyword"|val>> suffix~_const : <<span class="code type"|\\{{{   }}}string ->\\{{{   }}}  (unit, [ `WithoutSuffix ], [ `One of unit ] <<a_api text="param_name" | type Eliom_parameters.param_name >>)\\{{{   }}}  <<a_api text="params_type" | type Eliom_parameters.params_type >>>>>><<div class="info"|<<span class='code'|suffix~_const v>> is used only inside suffixes ~(do nothing for
    regular parameters~)~.
    ~It tells that the service takes a constant parameter
    inside the suffix~, whose value must be <<span class='code'|v>>~.
    ~It is used for putting constant directory names inside
    suffix parameters ~(and thus make suffix parameters not be only suffixes
    but anywhere you want in the path~, e~.g~. <<span class='code'|~/param~1~/const~/param~2>>~)~.\\
>>
<<div class="code" id="TYPEnon_localized_params"|<<span class="keyword"|type>> <<span class="code type"|('a, +'b, +'c)>> non~_localized~_params>>
<<div class="info"|
==@@id="2_Nonlocalizedparameters"@@~Non localized parameters==
\\
>>

<<div id="VALmake_non_localized_parameters" class="code"|<<span class="keyword"|val>> make~_non~_localized~_parameters : <<span class="code type"|\\{{{   }}}prefix:string ->\\{{{   }}}  name:string ->\\{{{   }}}  ?persistent:bool ->\\{{{   }}}  ('a, [ `WithoutSuffix ], 'b) <<a_api text="params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ('a, [ `WithoutSuffix ], 'b) <<a_api text="non_localized_params" | type Eliom_parameters.non_localized_params >>>>>><<div class="info"|create a new specification for non localized parameters~.
    ~You must give a name to this set of parameters~.
    ~Warning~: the names must be unique for the whole application~.
    ~That~'s why the name is composed by a prefix ~(the name of your project~) and
    another string ~(the name of your non localized parameters~)~.\\


    ~Will fail with exception <<span class='code'|~Failure ~_>> if the name contains a dot~.
    ~If <<span class='code'|~?persistent>> is <<span class='code'|true>>~, the non localized parameter
    may remain if you call another service~, if this service
    allows this ~(default <<span class='code'|false>>~)~.\\
>>
<<div id="VALget_non_localized_get_parameters" class="code"|<<span class="keyword"|val>> get~_non~_localized~_get~_parameters : <<span class="code type"|\\{{{   }}}sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ('a, [ `WithoutSuffix ], 'b) <<a_api text="non_localized_params" | type Eliom_parameters.non_localized_params >> ->\\{{{   }}}  'a option>>>><<div class="info"|<<span class='code'|get~_non~_localized~_get~_parameters ~~sp p>> decodes and 
    returns non localized ~G~E~T parameters specified by <<span class='code'|p>> if present~.\\
>>
<<div id="VALget_non_localized_post_parameters" class="code"|<<span class="keyword"|val>> get~_non~_localized~_post~_parameters : <<span class="code type"|\\{{{   }}}sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ('a, [ `WithoutSuffix ], 'b) <<a_api text="non_localized_params" | type Eliom_parameters.non_localized_params >> ->\\{{{   }}}  'a option>>>><<div class="info"|<<span class='code'|get~_non~_localized~_post~_parameters ~~sp p>> decodes and 
    returns non localized ~P~O~S~T parameters specified by <<span class='code'|p>> if present~.\\
>>
<<div class="code" id="TYPEnl_params_set"|<<span class="keyword"|type>> nl~_params~_set>>
<<div class="info"|~Use this type to give non localized parameters to a link or a form\\
>>

<<div id="VALempty_nl_params_set" class="code"|<<span class="keyword"|val>> empty~_nl~_params~_set : <<span class="code type"|<<a_api text="nl_params_set" | type Eliom_parameters.nl_params_set >>>>>><<div id="VALadd_nl_parameter" class="code"|<<span class="keyword"|val>> add~_nl~_parameter : <<span class="code type"|\\{{{   }}}<<a_api text="nl_params_set" | type Eliom_parameters.nl_params_set >> ->\\{{{   }}}  ('a, [< `WithSuffix | `WithoutSuffix ], 'b)\\{{{   }}}  <<a_api text="non_localized_params" | type Eliom_parameters.non_localized_params >> -> 'a -> <<a_api text="nl_params_set" | type Eliom_parameters.nl_params_set >>>>>><<div id="VALget_nl_params_names" class="code"|<<span class="keyword"|val>> get~_nl~_params~_names : <<span class="code type"|\\{{{   }}}('a, [< `WithSuffix | `WithoutSuffix ], 'b)\\{{{   }}}  <<a_api text="non_localized_params" | type Eliom_parameters.non_localized_params >> -> 'b>>>>