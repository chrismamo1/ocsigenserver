=Module <<a_api_type | module Ocsipersist >> =
<<div class="code"|<<span class="keyword"|module>> Ocsipersist: <<span class='code'|sig>><<a_api text=".." | module Ocsipersist >><<span class='code'|end>>>>~Persistent data on hard disk~.\\

----
\\
~There are currently two implementations of this module~,
   one using a ~D~B~M database~, and the other using ~S~Q~L~I~T~E~.
   ~Link the one your want with your program~.\\
\\

==@@id="2_Persistentreferences"@@~Persistent references==
\\
\\
~When launching the program~, if the value exists on hard disk~,
    it is loaded~, otherwise it is initialised to the default value\\
<<div class="code" id="TYPEt"|<<span class="keyword"|type>> <<span class="code type"|'a>> t>>
<<div class="info"|~Type of persistent data\\
>>

<<div class="code" id="TYPEstore"|<<span class="keyword"|type>> store>>
<<div class="info"|~Data are divided into stores~.
   ~Create one store for your project~, where you will save all your data~.\\
>>

<<div id="VALopen_store" class="code"|<<span class="keyword"|val>> open~_store : <<span class="code type"|string -> <<a_api text="store" | type Ocsipersist.store >>>>>><<div class="info"|~Open a store ~(and create it if it does not exist~)\\
>>
<<div id="VALmake_persistent" class="code"|<<span class="keyword"|val>> make~_persistent : <<span class="code type"|\\{{{   }}}store:<<a_api text="store" | type Ocsipersist.store >> ->\\{{{   }}}  name:string -> default:'a -> 'a <<a_api text="t" | type Ocsipersist.t >> Lwt.t>>>><<div class="info"|<<span class='code'|make~_persistent store name default>> find a persistent value
    named <<span class='code'|name>> in store <<span class='code'|store>>
    from database~, or create it with the default value <<span class='code'|default>> if it
    does not exist~.\\
>>
<<div id="VALmake_persistent_lazy" class="code"|<<span class="keyword"|val>> make~_persistent~_lazy : <<span class="code type"|\\{{{   }}}store:<<a_api text="store" | type Ocsipersist.store >> ->\\{{{   }}}  name:string -> default:(unit -> 'a) -> 'a <<a_api text="t" | type Ocsipersist.t >> Lwt.t>>>><<div class="info"|~Same as make~_persistent but the default value is evaluated only
    if needed\\
>>
<<div id="VALget" class="code"|<<span class="keyword"|val>> get : <<span class="code type"|'a <<a_api text="t" | type Ocsipersist.t >> -> 'a Lwt.t>>>><<div class="info"|<<span class='code'|get pv>> gives the value of <<span class='code'|pv>>\\
>>
<<div id="VALset" class="code"|<<span class="keyword"|val>> set : <<span class="code type"|'a <<a_api text="t" | type Ocsipersist.t >> -> 'a -> unit Lwt.t>>>><<div class="info"|<<span class='code'|set pv value>> sets a persistent value <<span class='code'|pv>> to <<span class='code'|value>>\\
>>
\\

==@@id="2_Persistenttables"@@~Persistent tables==
\\
<<div class="code" id="TYPEtable"|<<span class="keyword"|type>> <<span class="code type"|'a>> table>>
<<div class="info"|~Type of persistent table\\
>>

<<div id="VALtable_name" class="code"|<<span class="keyword"|val>> table~_name : <<span class="code type"|'a <<a_api text="table" | type Ocsipersist.table >> -> string Lwt.t>>>><<div class="info"|returns the name of the table\\
>>
<<div id="VALopen_table" class="code"|<<span class="keyword"|val>> open~_table : <<span class="code type"|string -> 'a <<a_api text="table" | type Ocsipersist.table >>>>>><<div class="info"|~Open a table ~(and create it if it does not exist~)\\
>>
<<div id="VALfind" class="code"|<<span class="keyword"|val>> find : <<span class="code type"|'a <<a_api text="table" | type Ocsipersist.table >> -> string -> 'a Lwt.t>>>><<div class="info"|<<span class='code'|find table key>> gives the value associated to <<span class='code'|key>>~.
  ~Fails with <<span class='code'|~Not~_found>> if not found~.\\
>>
<<div id="VALadd" class="code"|<<span class="keyword"|val>> add : <<span class="code type"|'a <<a_api text="table" | type Ocsipersist.table >> -> string -> 'a -> unit Lwt.t>>>><<div class="info"|<<span class='code'|add table key value>> associates <<span class='code'|value>> to <<span class='code'|key>>~.
   ~If the database already contains data associated with <<span class='code'|key>>~,
   that data is discarded and silently replaced by the new data~.\\
>>
<<div id="VALreplace_if_exists" class="code"|<<span class="keyword"|val>> replace~_if~_exists : <<span class="code type"|'a <<a_api text="table" | type Ocsipersist.table >> -> string -> 'a -> unit Lwt.t>>>><<div class="info"|<<span class='code'|replace~_if~_exists table key value>>
   associates <<span class='code'|value>> to <<span class='code'|key>> only if <<span class='code'|key>> is already bound~.
   ~If the database does not contain any data associated with <<span class='code'|key>>~,
   fails with <<span class='code'|~Not~_found>>~.\\
>>
<<div id="VALremove" class="code"|<<span class="keyword"|val>> remove : <<span class="code type"|'a <<a_api text="table" | type Ocsipersist.table >> -> string -> unit Lwt.t>>>><<div class="info"|<<span class='code'|remove table key>> removes the entry in the table if it exists\\
>>
<<div id="VALlength" class="code"|<<span class="keyword"|val>> length : <<span class="code type"|'a <<a_api text="table" | type Ocsipersist.table >> -> int Lwt.t>>>><<div class="info"|~Size of a table~.\\
>>
<<div id="VALiter_step" class="code"|<<span class="keyword"|val>> iter~_step : <<span class="code type"|(string -> 'a -> unit Lwt.t) -> 'a <<a_api text="table" | type Ocsipersist.table >> -> unit Lwt.t>>>><<div class="info"|~Important warning~: this iterator may not iter on all data of the table
    if another thread is modifying it in the same time~. ~Nonetheless~, it should
    not miss more than a very few data from time to time~, except if the table
    is very old ~(at least ~9 ~2~2~3 ~3~7~2 ~0~3~6 ~8~5~4 ~7~7~5 ~8~0~7 insertions~)~.\\
>>
<<div id="VALiter_table" class="code"|<<span class="keyword"|val>> iter~_table : <<span class="code type"|(string -> 'a -> unit Lwt.t) -> 'a <<a_api text="table" | type Ocsipersist.table >> -> unit Lwt.t>>>><<div class="info"|~Legacy interface for iter~_step\\
>>
<<div id="VALfold_step" class="code"|<<span class="keyword"|val>> fold~_step : <<span class="code type"|(string -> 'a -> 'b -> 'b Lwt.t) -> 'a <<a_api text="table" | type Ocsipersist.table >> -> 'b -> 'b Lwt.t>>>><<div class="info"|~Important warning~: this iterator may not iter on all data of the table
    if another thread is modifying it in the same time~. ~Nonetheless~, it should
    not miss more than a very few data from time to time~, except if the table
    is very old ~(at least ~9 ~2~2~3 ~3~7~2 ~0~3~6 ~8~5~4 ~7~7~5 ~8~0~7 insertions~)~.\\
>>
<<div id="VALfold_table" class="code"|<<span class="keyword"|val>> fold~_table : <<span class="code type"|(string -> 'a -> 'b -> 'b Lwt.t) -> 'a <<a_api text="table" | type Ocsipersist.table >> -> 'b -> 'b Lwt.t>>>><<div class="info"|~Legacy interface for fold~_step\\
>>
