=Module <<a_api_type | module Eliom_predefmod >> =
<<div class="code"|<<span class="keyword"|module>> Eliom_predefmod: <<span class='code'|sig>><<a_api text=".." | module Eliom_predefmod >><<span class='code'|end>>>>~This modules contains predefined modules for generating forms and
   registering handlers~, for several types of pages~:
   ~X~H~T~M~L pages typed with polymorphic variants~,
   untyped ~(text~) pages~, actions~, redirections~, files ~.~.~.\\

----
<<div class="code"|<<span class="keyword"|module type>> <<a_api text="ELIOMSIG" | module type Eliom_predefmod.ELIOMSIG >> = <<span class='code'|sig>><<a_api text=".." | module type Eliom_predefmod.ELIOMSIG >><<span class='code'|end>>>><<div class="info"|~The signature of such modules~.
>>
\\

==@@id="2_ModuleforregisteringXhtmlpagestypedwithpolymorphicvariantsusingXHTMLM"@@~Module for registering ~Xhtml pages typed with polymorphic variants using <<a_api | module XHTML.M >>==
\\
\\

===@@id="3_Creatinglinksandforms"@@~Creating links and forms===
\\
<<div class="code"|<<span class="keyword"|module type>> <<a_api text="XHTMLFORMSSIG" | module type Eliom_predefmod.XHTMLFORMSSIG >> = <<span class='code'|sig>><<a_api text=".." | module type Eliom_predefmod.XHTMLFORMSSIG >><<span class='code'|end>>>>\\

===@@id="3_Formsandregistrationfunctions"@@~Forms and registration functions===
\\
<<div class="code"|<<span class="keyword"|module>> <<a_api text="Xhtml" | module Eliom_predefmod.Xhtml >>: <<span class='code'|sig>><<a_api text=".." | module Eliom_predefmod.Xhtml >><<span class='code'|end>>>><<div class="info"|~Eliom forms and service registration functions for ~X~H~T~M~L
>>
<<div class="code"|<<span class="keyword"|module>> <<a_api text="Xhtmlforms" | module Eliom_predefmod.Xhtmlforms >>: <<span class="code type"|<<a_api text="XHTMLFORMSSIG" | module Eliom_predefmod.XHTMLFORMSSIG >>>><<span class="code type"|{{{  }}}>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="Xhtmlreg" | module Eliom_predefmod.Xhtmlreg >>: \\{{{   }}}<<span class="code type"|<<a_api text="Eliom_mkreg.ELIOMREGSIG" | module Eliom_mkreg.ELIOMREGSIG >>>><<span class="code type"|{{{  }}} with type page = xhtml elt \\{{{   }}}                                  and type options = <<a_api text="XHTML.M" | module XHTML.M >>.doctypes>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="Xhtmlreg_" | module Eliom_predefmod.Xhtmlreg_ >>: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~Xhtml~_content>><<span class='code'| ~: >>\\{{{   }}}<<span class="code type"|<<a_api text="Ocsigen_http_frame.HTTP_CONTENT" | module Ocsigen_http_frame.HTTP_CONTENT >>>><<span class="code type"|{{{  }}} with type t = [ `Html ] <<a_api text="XHTML.M" | module XHTML.M >>.elt\\{{{   }}}                                            and type options = <<a_api text="XHTML.M" | module XHTML.M >>.doctypes>><<span class='code'|~) ~-~> >>\\{{{   }}}<<span class="code type"|<<a_api text="Eliom_mkreg.REGCREATE" | module Eliom_mkreg.REGCREATE >>>><<span class="code type"|{{{  }}} with type page =  Xhtml_content.t\\{{{   }}}                                    and type options = <<a_api text="XHTML.M" | module XHTML.M >>.doctypes>>>>>><<div class="code"|<<span class="keyword"|module>> <<a_api text="Xhtmlcompact" | module Eliom_predefmod.Xhtmlcompact >>: <<span class='code'|sig>><<a_api text=".." | module Eliom_predefmod.Xhtmlcompact >><<span class='code'|end>>>><<div class="info"|~Eliom forms and service registration functions for ~X~H~T~M~L~, with
         compact markup ~(i~.e~.~, without pretty~-printing~)~.
>>
<<div class="code"|<<span class="keyword"|module>> <<a_api text="Xhtmlcompactreg" | module Eliom_predefmod.Xhtmlcompactreg >>: \\{{{   }}}<<span class="code type"|<<a_api text="Eliom_mkreg.ELIOMREGSIG" | module Eliom_mkreg.ELIOMREGSIG >>>><<span class="code type"|{{{  }}} with type page = xhtml elt \\{{{   }}}                                  and type options = <<a_api text="XHTML.M" | module XHTML.M >>.doctypes>>>>\\

===@@id="3_Moduletoregistersubpagesoftypeblock"@@~Module to register subpages of type <<span class='code'|block>>===
\\
<<div class="code"|<<span class="keyword"|module>> <<a_api text="Blocks" | module Eliom_predefmod.Blocks >>: <<span class='code'|sig>><<a_api text=".." | module Eliom_predefmod.Blocks >><<span class='code'|end>>>><<div class="info"|~Use this module for example for ~X~M~L~Http~Requests for block tags ~(e~.g~.
>>
\\

===@@id="3_FunctortocreatemodulestoregistersubpagesforothersubtypesofXHTML"@@~Functor to create modules to register subpages for other subtypes of ~X~H~T~M~L===
\\
<<div class="code"|<<span class="keyword"|module>> <<a_api text="SubXhtml" | module Eliom_predefmod.SubXhtml >>: <<div class="sig_block"|<<span class='code'|functor ~(>><<span class='code'|~T>><<span class='code'| ~: >><<span class='code'|sig>><<div class="sig_block"|<<div class="code" id="TYPEcontent"|<<span class="keyword"|type>> content>>

>><<span class='code'|end>><<span class='code'|~) ~-~> >><<span class='code'|sig>><<a_api text=".." | module Eliom_predefmod.SubXhtml >><<span class='code'|end>>>>>>\\

==@@id="2_Untypedpages"@@~Untyped pages==
\\
<<div class="code"|<<span class="keyword"|module>> <<a_api text="HtmlText" | module Eliom_predefmod.HtmlText >>: \\{{{   }}}<<span class="code type"|<<a_api text="ELIOMSIG" | module Eliom_predefmod.ELIOMSIG >>>><<span class="code type"|{{{  }}} with\\{{{   }}}type page = string\\{{{   }}}and type form_content_elt = string\\{{{   }}}and type form_content_elt_list = string\\{{{   }}}and type form_elt = string\\{{{   }}}and type a_content_elt = string\\{{{   }}}and type a_content_elt_list = string\\{{{   }}}and type a_elt = string\\{{{   }}}and type a_elt_list = string\\{{{   }}}and type div_content_elt = string\\{{{   }}}and type div_content_elt_list = string\\{{{   }}}and type uri = string\\{{{   }}}and type link_elt = string\\{{{   }}}and type script_elt = string\\{{{   }}}and type textarea_elt = string\\{{{   }}}and type select_elt = string\\{{{   }}}and type input_elt = string\\{{{   }}}and type pcdata_elt = string\\{{{   }}}and type a_attrib_t = string\\{{{   }}}and type form_attrib_t = string\\{{{   }}}and type input_attrib_t = string\\{{{   }}}and type textarea_attrib_t = string\\{{{   }}}and type select_attrib_t = string\\{{{   }}}and type link_attrib_t = string\\{{{   }}}and type script_attrib_t = string\\{{{   }}}and type input_type_t = string>>>><<div class="info"|~Module to create forms and register untyped ~H~T~M~L pages
>>
<<div class="code"|<<span class="keyword"|module>> <<a_api text="CssText" | module Eliom_predefmod.CssText >>: <<span class="code type"|<<a_api text="Eliom_mkreg.ELIOMREGSIG" | module Eliom_mkreg.ELIOMREGSIG >>>><<span class="code type"|{{{  }}} with type page = string>>>><<div class="info"|~Module to register untyped ~C~S~S pages
>>
<<div class="code"|<<span class="keyword"|module>> <<a_api text="Text" | module Eliom_predefmod.Text >>: <<span class="code type"|<<a_api text="Eliom_mkreg.ELIOMREGSIG" | module Eliom_mkreg.ELIOMREGSIG >>>><<span class="code type"|{{{  }}} with type page = string * string>>>><<div class="info"|~Module to register untyped text pages
>>
\\

==@@id="2_Otherkindsofservices"@@~Other kinds of services==
\\
<<div class="code"|<<span class="keyword"|module>> <<a_api text="Action" | module Eliom_predefmod.Action >>: \\{{{   }}}<<span class="code type"|<<a_api text="Eliom_mkreg.ELIOMREGSIG" | module Eliom_mkreg.ELIOMREGSIG >>>><<span class="code type"|{{{  }}} with\\{{{   }}}  type page = unit\\{{{   }}}  and type options = [ `Reload | `NoReload ]>>>><<div class="info"|~Actions do not generate any page~.
>>
<<div class="code"|<<span class="keyword"|module>> <<a_api text="Unit" | module Eliom_predefmod.Unit >>: \\{{{   }}}<<span class="code type"|<<a_api text="Eliom_mkreg.ELIOMREGSIG" | module Eliom_mkreg.ELIOMREGSIG >>>><<span class="code type"|{{{  }}} with\\{{{   }}}  type page = unit>>>><<div class="info"|~Like actions~, but the page is not reloaded~.
>>
<<div class="code"|<<span class="keyword"|module>> <<a_api text="Redirection" | module Eliom_predefmod.Redirection >>: \\{{{   }}}<<span class="code type"|<<a_api text="Eliom_mkreg.ELIOMREGSIG" | module Eliom_mkreg.ELIOMREGSIG >>>><<span class="code type"|{{{  }}} with\\{{{   }}}  type page =\\{{{   }}}  (unit, unit, Eliom_services.get_service_kind,\\{{{   }}}   [ `WithoutSuffix ],\\{{{   }}}   unit, unit, Eliom_services.registrable)\\{{{   }}}    Eliom_services.service\\{{{   }}}  and type options = [ `Temporary | `Permanent ]>>>><<div class="info"|~Allows to create redirections towards another service~.
>>
<<div class="code"|<<span class="keyword"|module>> <<a_api text="String_redirection" | module Eliom_predefmod.String_redirection >>: \\{{{   }}}<<span class="code type"|<<a_api text="Eliom_mkreg.ELIOMREGSIG" | module Eliom_mkreg.ELIOMREGSIG >>>><<span class="code type"|{{{  }}} with\\{{{   }}}  type page = <<a_api text="XHTML.M" | module XHTML.M >>.uri\\{{{   }}}  and type options = [ `Temporary | `Permanent ]>>>><<div class="info"|~Allows to create redirections towards other ~U~R~Ls~.
>>
<<div class="code"|<<span class="keyword"|module>> <<a_api text="Files" | module Eliom_predefmod.Files >>: \\{{{   }}}<<span class="code type"|<<a_api text="Eliom_mkreg.ELIOMREGSIG" | module Eliom_mkreg.ELIOMREGSIG >>>><<span class="code type"|{{{  }}} with\\{{{   }}}  type page = string>>>><<div class="info"|~Allows to send files~.
>>
<<div class="code"|<<span class="keyword"|module>> <<a_api text="Any" | module Eliom_predefmod.Any >>: \\{{{   }}}<<span class="code type"|<<a_api text="Eliom_mkreg.ELIOMREGSIG" | module Eliom_mkreg.ELIOMREGSIG >>>><<span class="code type"|{{{  }}} with\\{{{   }}}  type page = Ocsigen_http_frame.result>>>><<div class="info"|~Allows to create services that choose dynamically what they want
   to send~.
>>
<<div class="code"|<<span class="keyword"|module>> <<a_api text="Streamlist" | module Eliom_predefmod.Streamlist >>: \\{{{   }}}<<span class="code type"|<<a_api text="Eliom_mkreg.ELIOMREGSIG" | module Eliom_mkreg.ELIOMREGSIG >>>><<span class="code type"|{{{  }}} with\\{{{   }}}  type page = (((unit -> string Ocsigen_stream.t Lwt.t) list) *\\{{{   }}}                 string)>>>><<div class="info"|~Allows to send raw data using ~Ocsigen~'s streams~.
>>
