=Module <<a_api_type | module Eliom_duce_tools >> =
<<div class="code"|<<span class="keyword"|module>> Eliom_duce_tools: <<span class='code'|sig>><<a_api text=".." | module Eliom_duce_tools >><<span class='code'|end>>>>~Predefined boxes for ~Eliom\\

----
\\

==@@id="2_Menus"@@~Menus ==
\\
<<div id="VALmenu" class="code"|<<span class="keyword"|val>> menu : <<span class="code type"|\\{{{   }}}?classe:string list ->\\{{{   }}}  ([< <<a_api text="Eliom_services.get_service_kind" | type Eliom_services.get_service_kind >> ] as 'a,\\{{{   }}}   [< <<a_api text="Eliom_services.registrable" | type Eliom_services.registrable >> ] as 'b)\\{{{   }}}  <<a_api text="Eliom_tools_common.one_page" | type Eliom_tools_common.one_page >> * Eliom_duce.Blocks.a_content_elt_list ->\\{{{   }}}  (('a, 'b) <<a_api text="Eliom_tools_common.one_page" | type Eliom_tools_common.one_page >> * Eliom_duce.Blocks.a_content_elt_list)\\{{{   }}}  list ->\\{{{   }}}  ?service:('a, 'b) <<a_api text="Eliom_tools_common.one_page" | type Eliom_tools_common.one_page >> ->\\{{{   }}}  sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> -> <<a_api text="Xhtmltypes_duce.ul" | type Xhtmltypes_duce.ul >>>>>><<div class="info"|~Creates a menu\\


   ~Example~:\\


  <<span class='code'|menu ~~classe~:~["mainmenu"~]
    ~[
     ~(home~, ~<~:xmllist~< ~Home ~>~>~)~;
     ~(infos~, ~<~:xmllist~< ~More infos ~>~>~)
   ~] current sp>>\\
>>
\\

==@@id="2_Hierchicalsites"@@~Hierchical sites ==
\\
<<div id="VALhierarchical_menu_depth_first" class="code"|<<span class="keyword"|val>> hierarchical~_menu~_depth~_first : <<span class="code type"|\\{{{   }}}?classe:string list ->\\{{{   }}}  ?whole_tree:bool ->\\{{{   }}}  ([< <<a_api text="Eliom_services.get_service_kind" | type Eliom_services.get_service_kind >> ] as 'a,\\{{{   }}}   [< <<a_api text="Eliom_services.registrable" | type Eliom_services.registrable >> ] as 'b, Eliom_duce.Blocks.a_content_elt_list)\\{{{   }}}  <<a_api text="Eliom_tools_common.hierarchical_site" | type Eliom_tools_common.hierarchical_site >> ->\\{{{   }}}  ?service:('a, 'b) <<a_api text="Eliom_tools_common.one_page" | type Eliom_tools_common.one_page >> ->\\{{{   }}}  sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> -> {{[ ul* ]}}>>>><<div class="info"|<<span class='code'|hierarchical~_menu~_depth~_first menu>> constructs a function taking
    as parameters a service and <<span class='code'|~~sp>> ~(server parameters~)
    and displaying a hierarchical menu for this service~.\\


    ~The menu is constructed by exploring the tree using
    a depth~-first algorithm~. ~It means that the first menu item will be
    displayed~, followed by the whole sub~-menu for this item~, then the second
    menu item with its sub~-menu~, and so on~.
    ~By default~, only the sub~-menus corresponding to the current page
    are displayed~. ~If you want all the sub~-menus to be displayed~, specify
    <<span class='code'|~?whole~_tree~=true>>~.\\
>>
<<div id="VALhierarchical_menu_breadth_first" class="code"|<<span class="keyword"|val>> hierarchical~_menu~_breadth~_first : <<span class="code type"|\\{{{   }}}?classe:string list ->\\{{{   }}}  ([< <<a_api text="Eliom_services.get_service_kind" | type Eliom_services.get_service_kind >> ] as 'a,\\{{{   }}}   [< <<a_api text="Eliom_services.registrable" | type Eliom_services.registrable >> ] as 'b, Eliom_duce.Blocks.a_content_elt_list)\\{{{   }}}  <<a_api text="Eliom_tools_common.hierarchical_site" | type Eliom_tools_common.hierarchical_site >> ->\\{{{   }}}  ?service:('a, 'b) <<a_api text="Eliom_tools_common.one_page" | type Eliom_tools_common.one_page >> ->\\{{{   }}}  sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> -> {{[ ul* ]}}>>>><<div class="info"|<<span class='code'|hierarchical~_menu~_breadth~_first menu>> constructs a function taking
    as parameters a service and <<span class='code'|~~sp>> ~(server parameters~)
    and displaying a hierarchical menu for this service~.\\


    ~The menu is constructed by exploring the tree using
    a breadth~_first algorithm~. ~It means that the whole menu for one
    level will be displayed~, followed by all sub~-menus~.
    ~Only the sub~-menu corresponding to the current page
    is displayed~.\\
>>
<<div id="VALstructure_links" class="code"|<<span class="keyword"|val>> structure~_links : <<span class="code type"|\\{{{   }}}([< <<a_api text="Eliom_services.get_service_kind" | type Eliom_services.get_service_kind >> ] as 'a,\\{{{   }}}   [< <<a_api text="Eliom_services.registrable" | type Eliom_services.registrable >> ] as 'b, Eliom_duce.Blocks.a_content_elt_list)\\{{{   }}}  <<a_api text="Eliom_tools_common.hierarchical_site" | type Eliom_tools_common.hierarchical_site >> ->\\{{{   }}}  ?service:('a, 'b) <<a_api text="Eliom_tools_common.one_page" | type Eliom_tools_common.one_page >> ->\\{{{   }}}  sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> -> {{[ link* ]}}>>>><<div class="info"|~Returns the tags <<span class='code'|~<link rel~="subsection" ~.~.~.~>>> and
   <<span class='code'|~<link rev~="subsection" ~.~.~.~>>> for the given hierarchical site~.\\
>>
