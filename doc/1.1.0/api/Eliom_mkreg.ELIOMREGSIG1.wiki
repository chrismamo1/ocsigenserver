=Module type <<a_api_type | module type Eliom_mkreg.ELIOMREGSIG1 >> =
<<div class="code"|<<span class="keyword"|module type>> ELIOMREGSIG1 = <<span class='code'|sig>><<a_api text=".." | module type Eliom_mkreg.ELIOMREGSIG1 >><<span class='code'|end>>>>
----
<<div class="code" id="TYPEpage"|<<span class="keyword"|type>> page>>

<<div class="code" id="TYPEoptions"|<<span class="keyword"|type>> options>>

<<div id="VALsend" class="code"|<<span class="keyword"|val>> send : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG1.options >> ->\\{{{   }}}  ?cookies:<<a_api text="Eliom_services.cookie" | type Eliom_services.cookie >> list ->\\{{{   }}}  ?charset:string ->\\{{{   }}}  ?code:int ->\\{{{   }}}  sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> -> <<a_api text="Eliom_services.result_to_send" | type Eliom_services.result_to_send >> Lwt.t>>>><<div id="VALregister" class="code"|<<span class="keyword"|val>> register : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG1.options >> ->\\{{{   }}}  ?sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  service:('a, 'b, [< <<a_api text="Eliom_services.internal_service_kind" | type Eliom_services.internal_service_kind >> ],\\{{{   }}}           [< <<a_api text="Eliom_services.suff" | type Eliom_services.suff >> ], 'c, 'd, [ `Registrable ])\\{{{   }}}          <<a_api text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?error_handler:(<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}                  (string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}   'a -> 'b -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  unit>>>><<div class="info"|registers an service in the public service table
   with the associated handler function~.
   <<span class='code'|register service t f>> will associate the service <<span class='code'|service>>
   to the function <<span class='code'|f>>~.
   <<span class='code'|f>> is the function that creates a page~, called //service handler//~.\\


   ~That function takes three parameters~.* ~The first one has type <<span class='code'|~Eliom~_sessions~.server~_params>>
   and allows to have acces to informations about the request and the session~.
* ~The second and third ones are respectively ~G~E~T and ~P~O~S~T parameters~.


   ~For example if <<span class='code'|t>> is <<span class='code'|~Eliom~_parameters~.int "s">>~, then <<span class='code'| ~'get>> is <<span class='code'|int>>~.\\


    //~Warning~: ~If you want to register a service in the global table
    after the initialisation phase~,
    you must give the <<span class='code'|~~sp>> parameter~, otherwise it will raise the
    exception <<a_api | exception Eliom_common.Eliom_function_forbidden_outside_site_loading >>~.//\\


   ~Registering services and coservices is always done in memory as there is
   no means of marshalling closures~.\\


    ~Registering after initialization is not encouraged for coservices
    without timeout~, as such services will be available only until the end
    of the server process!
    ~If you use that for main services~, you will dynamically create new ~U~R~Ls!
    ~This may be dangerous as they will disappear if you stop the server~.
    ~Be very careful to re~-create these ~U~R~Ls when you relaunch the server~,
    otherwise~, some external links or bookmarks may be broken!\\


    ~Some output modules ~(for example ~Redirectmod~) define their own options
    for that function~.
    ~Use the <<span class='code'|~?options>> parameter to set them~.\\
>>
<<div id="VALregister_for_session" class="code"|<<span class="keyword"|val>> register~_for~_session : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG1.options >> ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  service:('a, 'b, [< <<a_api text="Eliom_services.internal_service_kind" | type Eliom_services.internal_service_kind >> ],\\{{{   }}}           [< <<a_api text="Eliom_services.suff" | type Eliom_services.suff >> ], 'c, 'd, [ `Registrable ])\\{{{   }}}          <<a_api text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  ?error_handler:(<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}                  (string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}   'a -> 'b -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  unit>>>><<div class="info"|registers a handler for a service in the session table~.
   ~If the same client does a request to this service~, this function will be
   used instead of the one from the public table~.\\


   ~If <<span class='code'|~~secure>> is false when the protocol is https~, it will affect
   the unsecure session~, otherwise~, il will affect the secure session in 
   https~, the unsecure one in http~.\\


   ~Warning~:* ~All main services created during initialization must be
   registered in the public table during initialisation~,
   but never after~,
* ~You can~'t register a service in a session table
   when no session is active ~(i~.e~. outside a service handler~)

\\
>>
<<div id="VALregister_new_service" class="code"|<<span class="keyword"|val>> register~_new~_service : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG1.options >> ->\\{{{   }}}  ?sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  path:<<a_api text="Ocsigen_extensions.url_path" | type Ocsigen_extensions.url_path >> ->\\{{{   }}}  get_params:('a, [< <<a_api text="Eliom_services.suff" | type Eliom_services.suff >> ] as 'b, 'c)\\{{{   }}}             <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:(<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}                  (string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}   'a -> unit -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  ('a, unit,\\{{{   }}}   [> `Attached of\\{{{   }}}        [> `Internal of [> `Service ] * [> `Get ] ] <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, unit, [> `Registrable ])\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|new~_service>> followed by <<span class='code'|register>>\\
>>
<<div id="VALregister_new_service'" class="code"|<<span class="keyword"|val>> register~_new~_service~' : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG1.options >> ->\\{{{   }}}  ?sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  name:string ->\\{{{   }}}  get_params:('a, [ `WithoutSuffix ], 'b) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:(<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}                  (string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}   'a -> unit -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  ('a, unit, [> `Nonattached of [> `Get ] <<a_api text="Eliom_services.na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   [ `WithoutSuffix ], 'b, unit, [> `Registrable ])\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|new~_service~'>> followed by <<span class='code'|register>>\\
>>
<<div id="VALregister_new_coservice" class="code"|<<span class="keyword"|val>> register~_new~_coservice : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG1.options >> ->\\{{{   }}}  ?sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  fallback:(unit, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                [ `Internal of [ `Service ] * [ `Get ] ] <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [ `WithoutSuffix ], unit, unit, [< <<a_api text="Eliom_services.registrable" | type Eliom_services.registrable >> ])\\{{{   }}}           <<a_api text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  get_params:('a, [ `WithoutSuffix ], 'b) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:(<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}                  (string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}   'a -> unit -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  ('a, unit,\\{{{   }}}   [> `Attached of\\{{{   }}}        [> `Internal of [> `Coservice ] * [> `Get ] ] <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   [ `WithoutSuffix ], 'b, unit, [> `Registrable ])\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|new~_coservice>> followed by <<span class='code'|register>>\\
>>
<<div id="VALregister_new_coservice'" class="code"|<<span class="keyword"|val>> register~_new~_coservice~' : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG1.options >> ->\\{{{   }}}  ?sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  get_params:('a, [ `WithoutSuffix ], 'b) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:(<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}                  (string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}   'a -> unit -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  ('a, unit, [> `Nonattached of [> `Get ] <<a_api text="Eliom_services.na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   [ `WithoutSuffix ], 'b, unit, [> `Registrable ])\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|new~_coservice~'>> followed by <<span class='code'|register>>\\
>>
<<div id="VALregister_new_coservice_for_session" class="code"|<<span class="keyword"|val>> register~_new~_coservice~_for~_session : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG1.options >> ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  fallback:(unit, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                [ `Internal of [ `Service ] * [ `Get ] ] <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [ `WithoutSuffix ], unit, unit, [< <<a_api text="Eliom_services.registrable" | type Eliom_services.registrable >> ])\\{{{   }}}           <<a_api text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  get_params:('a, [ `WithoutSuffix ], 'b) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:(<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}                  (string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}   'a -> unit -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  ('a, unit,\\{{{   }}}   [> `Attached of\\{{{   }}}        [> `Internal of [> `Coservice ] * [> `Get ] ] <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   [ `WithoutSuffix ], 'b, unit, [> `Registrable ])\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|new~_coservice>> followed by <<span class='code'|register~_for~_session>>\\
>>
<<div id="VALregister_new_coservice_for_session'" class="code"|<<span class="keyword"|val>> register~_new~_coservice~_for~_session~' : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG1.options >> ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  get_params:('a, [ `WithoutSuffix ], 'b) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:(<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}                  (string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}   'a -> unit -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  ('a, unit, [> `Nonattached of [> `Get ] <<a_api text="Eliom_services.na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   [ `WithoutSuffix ], 'b, unit, [> `Registrable ])\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|new~_coservice~'>> followed by <<span class='code'|register~_for~_session>>\\
>>
<<div id="VALregister_new_post_service" class="code"|<<span class="keyword"|val>> register~_new~_post~_service : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG1.options >> ->\\{{{   }}}  ?sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  fallback:('a, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                [ `Internal of [ `Coservice | `Service ] * [ `Get ] ]\\{{{   }}}                <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [< <<a_api text="Eliom_services.suff" | type Eliom_services.suff >> ] as 'b, 'c, unit, [< `Registrable ])\\{{{   }}}           <<a_api text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  post_params:('d, [ `WithoutSuffix ], 'e) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:(<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}                  (string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}   'a -> 'd -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  ('a, 'd,\\{{{   }}}   [> `Attached of\\{{{   }}}        [> `Internal of [ `Coservice | `Service ] * [> `Post ] ]\\{{{   }}}        <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, 'e, [> `Registrable ])\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|new~_post~_service>> followed by <<span class='code'|register>>\\
>>
<<div id="VALregister_new_post_service'" class="code"|<<span class="keyword"|val>> register~_new~_post~_service~' : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG1.options >> ->\\{{{   }}}  ?sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?keep_get_na_params:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  name:string ->\\{{{   }}}  post_params:('a, [ `WithoutSuffix ], 'b) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:(<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}                  (string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}   unit -> 'a -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (unit, 'a, [> `Nonattached of [> `Post ] <<a_api text="Eliom_services.na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   [ `WithoutSuffix ], unit, 'b, [> `Registrable ])\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|new~_post~_service~'>> followed by <<span class='code'|register>>\\
>>
<<div id="VALregister_new_post_coservice" class="code"|<<span class="keyword"|val>> register~_new~_post~_coservice : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG1.options >> ->\\{{{   }}}  ?sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  fallback:('a, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                [ `Internal of [< `Coservice | `Service ] * [ `Get ] ]\\{{{   }}}                <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [< <<a_api text="Eliom_services.suff" | type Eliom_services.suff >> ] as 'b, 'c, unit, [< `Registrable ])\\{{{   }}}           <<a_api text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  post_params:('d, [ `WithoutSuffix ], 'e) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:(<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}                  (string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}   'a -> 'd -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  ('a, 'd,\\{{{   }}}   [> `Attached of\\{{{   }}}        [> `Internal of [> `Coservice ] * [> `Post ] ] <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, 'e, [> `Registrable ])\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|new~_post~_coservice>> followed by <<span class='code'|register>>\\
>>
<<div id="VALregister_new_post_coservice'" class="code"|<<span class="keyword"|val>> register~_new~_post~_coservice~' : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG1.options >> ->\\{{{   }}}  ?sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?keep_get_na_params:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  post_params:('a, [ `WithoutSuffix ], 'b) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:(<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}                  (string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}   unit -> 'a -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (unit, 'a, [> `Nonattached of [> `Post ] <<a_api text="Eliom_services.na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   [ `WithoutSuffix ], unit, 'b, [> `Registrable ])\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|new~_post~_coservice~'>> followed by <<span class='code'|register>>\\
>>
<<div id="VALregister_new_post_coservice_for_session" class="code"|<<span class="keyword"|val>> register~_new~_post~_coservice~_for~_session : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG1.options >> ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  fallback:('a, unit,\\{{{   }}}            [ `Attached of\\{{{   }}}                [ `Internal of [< `Coservice | `Service ] * [ `Get ] ]\\{{{   }}}                <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}            [< <<a_api text="Eliom_services.suff" | type Eliom_services.suff >> ] as 'b, 'c, unit, [ `Registrable ])\\{{{   }}}           <<a_api text="Eliom_services.service" | type Eliom_services.service >> ->\\{{{   }}}  post_params:('d, [ `WithoutSuffix ], 'e) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:(<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}                  (string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}   'a -> 'd -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  ('a, 'd,\\{{{   }}}   [> `Attached of\\{{{   }}}        [> `Internal of [> `Coservice ] * [> `Post ] ] <<a_api text="Eliom_services.a_s" | type Eliom_services.a_s >> ],\\{{{   }}}   'b, 'c, 'e, [> `Registrable ])\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|new~_post~_coservice>> followed by <<span class='code'|register~_for~_session>>\\
>>
<<div id="VALregister_new_post_coservice_for_session'" class="code"|<<span class="keyword"|val>> register~_new~_post~_coservice~_for~_session~' : <<span class="code type"|\\{{{   }}}?options:<<a_api text="options" | type Eliom_mkreg.ELIOMREGSIG1.options >> ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  sp:<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?max_use:int ->\\{{{   }}}  ?timeout:float ->\\{{{   }}}  ?keep_get_na_params:bool ->\\{{{   }}}  ?https:bool ->\\{{{   }}}  post_params:('a, [ `WithoutSuffix ], 'b) <<a_api text="Eliom_parameters.params_type" | type Eliom_parameters.params_type >> ->\\{{{   }}}  ?error_handler:(<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}                  (string * exn) list -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (<<a_api text="Eliom_sessions.server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}   unit -> 'a -> <<a_api text="page" | type Eliom_mkreg.ELIOMREGSIG1.page >> Lwt.t) ->\\{{{   }}}  (unit, 'a, [> `Nonattached of [> `Post ] <<a_api text="Eliom_services.na_s" | type Eliom_services.na_s >> ],\\{{{   }}}   [ `WithoutSuffix ], unit, 'b, [> `Registrable ])\\{{{   }}}  <<a_api text="Eliom_services.service" | type Eliom_services.service >>>>>><<div class="info"|~Same as <<span class='code'|new~_post~_coservice~'>> followed by <<span class='code'|register~_for~_session>>\\
>>
