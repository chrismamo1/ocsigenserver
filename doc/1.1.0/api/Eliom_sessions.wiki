=Module <<a_api_type | module Eliom_sessions >> =
<<div class="code"|<<span class="keyword"|module>> Eliom_sessions: <<span class='code'|sig>><<a_api text=".." | module Eliom_sessions >><<span class='code'|end>>>>~This module contains the functions you need to get ~(or set~)
   information about the request or the session~.\\

----
\\
~There are three kinds of sessions~, all using different cookies~:* service sessions ~(used to register services in a table of session~)~,
* volatile data sessions ~(used to save session data in tables in memory~)~,
* persistent sessions ~(used to save session data on hard disk~)~.


   ~For all these sessions~, you may set a timeout ~(global or individual for one
   user~) or set an expiration date for the cookie~.
   "~Volatile" denotes both service and in memory data sessions~.\\


   ~Be very carefull if you use several sessions concurrently~, as they may have
   different duration ~(one may be closed while the other are not~)~.
   ~Duration of service sessions is sometimes shorter than
   volatile data sessions~, which is usually shorter than
   persistent sessions~.\\


   ~If you want several sessions of the same type for one site~,
   you can choose a personalized session name by giving the optional
   parameter <<span class='code'|~?session~_name>>~.\\


   ~It is highly recommended to put all the sessions for one user in one
   //session group//~. ~Thus~, it will be possible to implement features
   like "close all opened sessions" for one user~, or limitation of
   the number of sessions one user can open concurrently~, or setting
   data for one group of sessions~.\\
\\

==@@id="2_Gettinginformationabouttherequest"@@~Getting information about the request==
\\
<<div class="code" id="TYPEserver_params"|<<span class="keyword"|type>> server~_params>>

<<div id="VALget_user_agent" class="code"|<<span class="keyword"|val>> get~_user~_agent : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> string>>>><<div class="info"|returns the name of the user agent that did the request
   ~(usually the name of the browser~)~.\\
>>
<<div id="VALget_full_url" class="code"|<<span class="keyword"|val>> get~_full~_url : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> string>>>><<div class="info"|returns the full ~U~R~L as a string\\
>>
<<div id="VALget_remote_ip" class="code"|<<span class="keyword"|val>> get~_remote~_ip : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> string>>>><<div class="info"|returns the internet address of the client as a string\\
>>
<<div id="VALget_remote_inet_addr" class="code"|<<span class="keyword"|val>> get~_remote~_inet~_addr : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> Unix.inet_addr>>>><<div class="info"|returns the internet address of the client~,
   using the type <<span class='code'|~Unix~.inet~_addr>> ~(defined in ~O~Caml~'s standard library~)~.\\
>>
<<div id="VALget_current_full_path_string" class="code"|<<span class="keyword"|val>> get~_current~_full~_path~_string : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> string>>>><<div class="info"|returns the full path of the ~U~R~L as a string~.\\
>>
<<div id="VALget_current_full_path" class="code"|<<span class="keyword"|val>> get~_current~_full~_path : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> <<a_api text="Ocsigen_extensions.url_path" | type Ocsigen_extensions.url_path >>>>>><<div class="info"|returns the full path of the ~U~R~L using the type <<a_api | type Ocsigen_extensions.url_path >>\\
>>
<<div id="VALget_current_sub_path_string" class="code"|<<span class="keyword"|val>> get~_current~_sub~_path~_string : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> string>>>><<div class="info"|returns the sub path of the ~U~R~L as a string~.
    ~The sub~-path is the full path without the path of the site ~(set in the
    configuration file~)~.\\
>>
<<div id="VALget_current_sub_path" class="code"|<<span class="keyword"|val>> get~_current~_sub~_path : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> <<a_api text="Ocsigen_extensions.url_path" | type Ocsigen_extensions.url_path >>>>>><<div class="info"|returns the sub path of the ~U~R~L using the type <<a_api | type Ocsigen_extensions.url_path >>~.
    ~The sub~-path is the full path without the path of the site ~(set in the
    configuration file~)~.\\
>>
<<div id="VALget_header_hostname" class="code"|<<span class="keyword"|val>> get~_header~_hostname : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> string option>>>><<div class="info"|returns the hostname that has been sent by the user agent~.
    ~For ~H~T~T~P~/~1~.~0~, the ~Host field is not mandatory in the request~.\\
>>
<<div id="VALget_hostname" class="code"|<<span class="keyword"|val>> get~_hostname : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> string>>>><<div class="info"|returns the hostname declared in the config file ~(<<span class='code'|~<host defaulthostname~="~.~.~."~>>>~)~.\\
>>
<<div id="VALget_default_port" class="code"|<<span class="keyword"|val>> get~_default~_port : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> int>>>><<div class="info"|returns the port number declared in the config file ~(<<span class='code'|~<host defaulthttpport~="~.~.~."~>>>~)~.\\
>>
<<div id="VALget_default_sslport" class="code"|<<span class="keyword"|val>> get~_default~_sslport : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> int>>>><<div class="info"|returns the https port number declared in the config file ~(<<span class='code'|~<host defaulthttpsport~="~.~.~."~>>>~)~.\\
>>
<<div id="VALget_server_port" class="code"|<<span class="keyword"|val>> get~_server~_port : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> int>>>><<div class="info"|returns the port on which the request has been done~.\\
>>
<<div id="VALget_ssl" class="code"|<<span class="keyword"|val>> get~_ssl : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> bool>>>><<div class="info"|returns true if https is used~, false if http~.\\
>>
<<div id="VALget_suffix" class="code"|<<span class="keyword"|val>> get~_suffix : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> <<a_api text="Ocsigen_extensions.url_path" | type Ocsigen_extensions.url_path >>>>>><<div class="info"|returns the suffix of the current ~U~R~L\\
>>
<<div id="VALget_cookies" class="code"|<<span class="keyword"|val>> get~_cookies : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> string Ocsigen_http_frame.Cookievalues.t>>>><<div class="info"|returns the cookies sent by the browser\\
>>
\\

==@@id="2_Gettingandsettinginformationaboutthecurrentsession"@@ ~Getting and setting information about the current session==
\\
\\

===@@id="3_Globalconfigurationofsessiontimeouts"@@~Global configuration of session timeouts===
\\
\\
~The following functions set the timeout for sessions~, for the
    different kinds of session~.  ~The sessions will be closed after
    this amount of time of inactivity from the user~. <<span class='code'|~None>> means no
    timeout~.\\


    ~The optional parameter <<span class='code'|~?recompute~_expdates>> is <<span class='code'|false>> by
    default~.  ~If you set it to <<span class='code'|true>>~, the expiration dates for all
    sessions in the table will be recomputed with the new timeout~.
    ~That is~, the difference between the new timeout and the old one
    will be added to their expiration dates ~(by another ~Lwt thread~)~.
    ~Sessions whose timeout has been set individually with
    <<a_api | val Eliom_sessions.set_volatile_session_timeout >> won~'t be affected~.\\


    //~Warning~: ~If you use one of these functions after the
    initialisation phase~, you must give the <<span class='code'|~~sp>> parameter~, otherwise
    it will raise the exception
    <<a_api | exception Eliom_common.Eliom_function_forbidden_outside_site_loading >>~. ~This
    remark also applies to <<span class='code'|get~_~*>> functions~.//\\
<<div id="VALset_global_volatile_session_timeout" class="code"|<<span class="keyword"|val>> set~_global~_volatile~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?recompute_expdates:bool -> float option -> unit>>>><<div class="info"|~Sets the timeout for volatile ~(~= "in memory"~) sessions ~(both
    service session and volatile data session~) ~(server side~)~.\\
>>
<<div id="VALset_global_service_session_timeout" class="code"|<<span class="keyword"|val>> set~_global~_service~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?recompute_expdates:bool -> float option -> unit>>>><<div class="info"|~Sets the timeout for service sessions ~(server side~)~.\\
>>
<<div id="VALset_global_volatile_data_session_timeout" class="code"|<<span class="keyword"|val>> set~_global~_volatile~_data~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?recompute_expdates:bool -> float option -> unit>>>><<div class="info"|~Sets the timeout for volatile ~(~= "in memory"~) data sessions ~(server side~)~.\\
>>
<<div id="VALset_global_persistent_data_session_timeout" class="code"|<<span class="keyword"|val>> set~_global~_persistent~_data~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  ?recompute_expdates:bool -> float option -> unit>>>><<div class="info"|~Sets the timeout for persistent sessions ~(server side~)~.\\
>>
<<div id="VALget_global_service_session_timeout" class="code"|<<span class="keyword"|val>> get~_global~_service~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> float option>>>><<div class="info"|~Returns the timeout for service sessions ~(server side~)~.\\
>>
<<div id="VALget_global_volatile_data_session_timeout" class="code"|<<span class="keyword"|val>> get~_global~_volatile~_data~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> float option>>>><<div class="info"|~Returns the timeout for "volatile data" sessions ~(server side~)~.\\
>>
<<div id="VALget_global_persistent_data_session_timeout" class="code"|<<span class="keyword"|val>> get~_global~_persistent~_data~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> float option>>>><<div class="info"|~Returns the timeout for persistent sessions ~(server side~)~.\\
>>
\\

===@@id="3_Personalizingsessiontimeouts"@@~Personalizing session timeouts===
\\
<<div id="VALset_service_session_timeout" class="code"|<<span class="keyword"|val>> set~_service~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> float option -> unit>>>><<div class="info"|sets the timeout for service session ~(server side~) for one user~,
   in seconds~. <<span class='code'|~None>> ~= no timeout\\
>>
<<div id="VALunset_service_session_timeout" class="code"|<<span class="keyword"|val>> unset~_service~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit>>>><<div class="info"|remove the service session timeout for one user
   ~(and turn back to the default~)~.\\
>>
<<div id="VALget_service_session_timeout" class="code"|<<span class="keyword"|val>> get~_service~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> float option>>>><<div class="info"|returns the timeout for current service session~.
    <<span class='code'|~None>> ~= no timeout\\
>>
<<div id="VALset_volatile_data_session_timeout" class="code"|<<span class="keyword"|val>> set~_volatile~_data~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> float option -> unit>>>><<div class="info"|sets the timeout for volatile data session ~(server side~) for one user~,
   in seconds~. <<span class='code'|~None>> ~= no timeout\\
>>
<<div id="VALunset_volatile_data_session_timeout" class="code"|<<span class="keyword"|val>> unset~_volatile~_data~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit>>>><<div class="info"|remove the "volatile data" session timeout for one user
   ~(and turn back to the default~)~.\\
>>
<<div id="VALget_volatile_data_session_timeout" class="code"|<<span class="keyword"|val>> get~_volatile~_data~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> float option>>>><<div class="info"|returns the timeout for current volatile data session~.
    <<span class='code'|~None>> ~= no timeout\\
>>
<<div id="VALset_volatile_session_timeout" class="code"|<<span class="keyword"|val>> set~_volatile~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> float option -> unit>>>><<div class="info"|sets the timeout for volatile sessions ~(service and volatile data~)
    ~(server side~) for one user~,
   in seconds~. <<span class='code'|~None>> ~= no timeout\\
>>
<<div id="VALunset_volatile_session_timeout" class="code"|<<span class="keyword"|val>> unset~_volatile~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit>>>><<div class="info"|remove the session timeout for one user for both service session and
   volatile data session
   ~(and turn back to the default~)~.\\
>>
<<div id="VALset_persistent_data_session_timeout" class="code"|<<span class="keyword"|val>> set~_persistent~_data~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> float option -> unit Lwt.t>>>><<div class="info"|sets the timeout for persistent session ~(server side~) for one user~,
   in seconds~. <<span class='code'|~None>> ~= no timeout\\
>>
<<div id="VALunset_persistent_data_session_timeout" class="code"|<<span class="keyword"|val>> unset~_persistent~_data~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit Lwt.t>>>><<div class="info"|remove the persistent session timeout for one user
   ~(and turn back to the default~)~.\\
>>
<<div id="VALget_persistent_data_session_timeout" class="code"|<<span class="keyword"|val>> get~_persistent~_data~_session~_timeout : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> float option Lwt.t>>>><<div class="info"|returns the persistent session timeout for one user~. <<span class='code'|~None>> ~= no timeout\\
>>
\\

===@@id="3_Sessiongroups"@@~Session groups===
\\
<<div class="code" id="TYPEsession_data"|<<span class="keyword"|type>> <<span class="code type"|'a>> session~_data = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|No_data>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Data_session_expired>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Data>> <<span class="keyword"|of>> <<span class="code type"|'a>>|>>

\\
~Session groups may be used    for example to limit
    the number of sessions one user can open at the same time~, or to implement
    a "close all sessions" feature~.
    ~Usually~, the group is the user name~.\\
<<div id="VALset_service_session_group" class="code"|<<span class="keyword"|val>> set~_service~_session~_group : <<span class="code type"|\\{{{   }}}?set_max:int option ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> string -> unit>>>><<div class="info"|sets the group to which belong the service session~.
    ~If the optional <<span class='code'|~?set~_max>> parameter is present~, also sets the maximum
    number of sessions in the group~. <<span class='code'|~None>> means "no limitation"~.
    ~If <<span class='code'|~~secure>> is false when the protocol is https~, it will affect
    the unsecure session~, otherwise~, il will affect the secure session in 
    https~, the unsecure one in http~.\\
>>
<<div id="VALunset_service_session_group" class="code"|<<span class="keyword"|val>> unset~_service~_session~_group : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit>>>><<div class="info"|~Remove the session from its group\\
>>
<<div id="VALget_service_session_group" class="code"|<<span class="keyword"|val>> get~_service~_session~_group : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> string <<a_api text="session_data" | type Eliom_sessions.session_data >>>>>><<div class="info"|returns the group to which belong the service session~.
    ~If the session does not belong to any group~, or if no session is opened~,
    return <<span class='code'|~None>>~.\\
>>
<<div id="VALset_volatile_data_session_group" class="code"|<<span class="keyword"|val>> set~_volatile~_data~_session~_group : <<span class="code type"|\\{{{   }}}?set_max:int option ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> string -> unit>>>><<div class="info"|sets the group to which belong the volatile data session~.
    ~If the optional <<span class='code'|~?set~_max>> parameter is present~, also sets the maximum
    number of sessions in the group~. <<span class='code'|~None>> means "no limitation"~.\\
>>
<<div id="VALunset_volatile_data_session_group" class="code"|<<span class="keyword"|val>> unset~_volatile~_data~_session~_group : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit>>>><<div class="info"|~Remove the session from its group\\
>>
<<div id="VALget_volatile_data_session_group" class="code"|<<span class="keyword"|val>> get~_volatile~_data~_session~_group : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> string <<a_api text="session_data" | type Eliom_sessions.session_data >>>>>><<div class="info"|returns the group to which belong the data session~.
    ~If the session does not belong to any group~, or if no session is opened~,
    return <<span class='code'|~None>>~.\\
>>
<<div id="VALset_persistent_data_session_group" class="code"|<<span class="keyword"|val>> set~_persistent~_data~_session~_group : <<span class="code type"|\\{{{   }}}?set_max:int option ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> string -> unit Lwt.t>>>><<div class="info"|sets the group to which belong the persistent session~.
    ~If the optional <<span class='code'|~?set~_max>> parameter is present~, also sets the maximum
    number of sessions in the group~. <<span class='code'|~None>> means "no limitation"~.\\
>>
<<div id="VALunset_persistent_data_session_group" class="code"|<<span class="keyword"|val>> unset~_persistent~_data~_session~_group : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit Lwt.t>>>><<div class="info"|~Remove the session from its group\\
>>
<<div id="VALget_persistent_data_session_group" class="code"|<<span class="keyword"|val>> get~_persistent~_data~_session~_group : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  unit -> string <<a_api text="session_data" | type Eliom_sessions.session_data >> Lwt.t>>>><<div class="info"|returns the group to which belong the persistent session~.
    ~If the session does not belong to any group~, or if no session is opened~,
    return <<span class='code'|~None>>~.\\
>>
\\
~The following functions of this section set the maximum number of
    sessions in a session group~, for the different kinds of session~.
    <<span class='code'|~None>> means "no limit"~. ~This won~'t modify existing groups~. ~That
    value will be used only as default value if you do not specify the
    optional parameter <<span class='code'|~?set~_max>> of function
    <<a_api | val Eliom_sessions.set_volatile_data_session_group >>~.\\
<<div id="VALset_default_max_service_sessions_per_group" class="code"|<<span class="keyword"|val>> set~_default~_max~_service~_sessions~_per~_group : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> int option -> unit>>>><<div class="info"|~Sets the maximum number of service sessions in a session group
    ~(see above~)~.\\
>>
<<div id="VALset_default_max_volatile_data_sessions_per_group" class="code"|<<span class="keyword"|val>> set~_default~_max~_volatile~_data~_sessions~_per~_group : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> int option -> unit>>>><<div class="info"|~Sets the maximum number of volatile data sessions in a session
    group ~(see above~)~.\\
>>
<<div id="VALset_default_max_persistent_data_sessions_per_group" class="code"|<<span class="keyword"|val>> set~_default~_max~_persistent~_data~_sessions~_per~_group : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> int option -> unit>>>><<div class="info"|~Sets the maximum number of persistent data sessions in a session
    group ~(see above~)~.\\
>>
\\

===@@id="3_Cookies"@@~Cookies===
\\
\\
~The functions in this section ask the browser to set the cookie
    expiration date~, for the different kinds of session~, in seconds~,
    since the ~1st of ~January ~1~9~7~0~. <<span class='code'|~None>> means the cookie will expire
    when the browser is closed~. ~Note~: there is no way to set cookies
    for an infinite time on browsers~.\\
<<div id="VALset_volatile_session_cookies_exp_date" class="code"|<<span class="keyword"|val>> set~_volatile~_session~_cookies~_exp~_date : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> float option -> unit>>>><<div class="info"|~Sets the cookie expiration date for the current volatile sessions
    ~(service and data~) ~(see above~)~.\\
>>
<<div id="VALset_service_session_cookie_exp_date" class="code"|<<span class="keyword"|val>> set~_service~_session~_cookie~_exp~_date : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> float option -> unit>>>><<div class="info"|~Sets the cookie expiration date for the current service session
    ~(see above~)~.\\
>>
<<div id="VALset_volatile_data_session_cookie_exp_date" class="code"|<<span class="keyword"|val>> set~_volatile~_data~_session~_cookie~_exp~_date : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> float option -> unit>>>><<div class="info"|~Sets the cookie expiration date for the current data session ~(see
    above~)~.\\
>>
<<div id="VALset_persistent_data_session_cookie_exp_date" class="code"|<<span class="keyword"|val>> set~_persistent~_data~_session~_cookie~_exp~_date : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> float option -> unit Lwt.t>>>><<div class="info"|~Sets the cookie expiration date for the persistent session ~(see
    above~)~.\\
>>
\\

===@@id="3_Exceptionsandfallbacks"@@~Exceptions and fallbacks===
\\
<<div id="VALget_exn" class="code"|<<span class="keyword"|val>> get~_exn : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> exn list>>>><<div class="info"|returns the exceptions that have been sent by the previous services
   to their fallback~, if any~. ~Keep an eye on these exception to know what
   succeeded before that service was called ~(failed connection~, timeout ~.~.~.~)\\
>>
<<div id="VALget_previous_extension_error_code" class="code"|<<span class="keyword"|val>> get~_previous~_extension~_error~_code : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> int>>>><<div class="info"|returns the ~H~T~T~P error code sent by the ~Ocsigen extension
   that tried to answer to the request before ~Eliom~.
   ~It is ~4~0~4 by default~.\\
>>
\\

==@@id="2_Gettinginformationaboutfilesuploaded"@@~Getting information about files uploaded==
\\
\\
~Warning~: ~The files uploaded are automatically erased by ~Ocsigen
   just after the request has been fulfilled~.
   ~If you want to keep them~, create a new hard link yourself during
   the service ~(or make a copy~)~.\\
<<div id="VALget_tmp_filename" class="code"|<<span class="keyword"|val>> get~_tmp~_filename : <<span class="code type"|<<a_api text="Ocsigen_extensions.file_info" | type Ocsigen_extensions.file_info >> -> string>>>><<div class="info"|returns the filename used by ~Ocsigen for the uploaded file~.\\
>>
<<div id="VALget_filesize" class="code"|<<span class="keyword"|val>> get~_filesize : <<span class="code type"|<<a_api text="Ocsigen_extensions.file_info" | type Ocsigen_extensions.file_info >> -> int64>>>><<div class="info"|returns the size of the file~.\\
>>
<<div id="VALget_original_filename" class="code"|<<span class="keyword"|val>> get~_original~_filename : <<span class="code type"|<<a_api text="Ocsigen_extensions.file_info" | type Ocsigen_extensions.file_info >> -> string>>>><<div class="info"|returns the name the file had on the client when it has been sent~.\\
>>
\\

==@@id="2_Gettinginformationfromtheconfigurationfile"@@~Getting information from the configuration file==
\\
<<div id="VALget_config" class="code"|<<span class="keyword"|val>> get~_config : <<span class="code type"|unit -> <<a_api text="Simplexmlparser.xml" | type Simplexmlparser.xml >> list>>>><<div class="info"|returns the information of the configuration file concerning that site
   ~(between <<span class='code'|~<site~>>> and <<span class='code'|~<~/site~>>>~)~.\\


   //~Warning~: ~You must call that function during the initialisation of
   your module ~(not during a ~Lwt thread or a service~)~.
   ~If you use that function after~,
   you must give the <<span class='code'|~~sp>> parameter~, otherwise it will raise the exception
   <<a_api | exception Eliom_common.Eliom_function_forbidden_outside_site_loading >>~.//\\
>>
<<div id="VALget_site_dir" class="code"|<<span class="keyword"|val>> get~_site~_dir : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> <<a_api text="Ocsigen_extensions.url_path" | type Ocsigen_extensions.url_path >>>>>><<div class="info"|returns the root of the site~.\\
>>
<<div id="VALget_config_file_charset" class="code"|<<span class="keyword"|val>> get~_config~_file~_charset : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> string>>>><<div class="info"|returns the charset for this site ~(from the configuration file~)\\
>>
\\

==@@id="2_Sessiondata"@@~Session data==
\\
\\

===@@id="3_Inmemorysessiondata"@@~In memory session data===
\\
<<div class="code" id="TYPEvolatile_table"|<<span class="keyword"|type>> <<span class="code type"|'a>> volatile~_table>>
<<div class="info"|~The type of ~(volatile~) session data tables~.\\
>>

<<div id="VALcreate_volatile_table" class="code"|<<span class="keyword"|val>> create~_volatile~_table : <<span class="code type"|?sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> 'a <<a_api text="volatile_table" | type Eliom_sessions.volatile_table >>>>>><<div class="info"|creates a table in memory where you can store the session data for
   all users~.\\


   //~Warning~: ~If you use that function after the initialization phase~,
   you must give the <<span class='code'|~~sp>> parameter~, otherwise it will raise the exception
   <<a_api | exception Eliom_common.Eliom_function_forbidden_outside_site_loading >>~.//\\
>>
<<div id="VALget_volatile_session_data" class="code"|<<span class="keyword"|val>> get~_volatile~_session~_data : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  table:'a <<a_api text="volatile_table" | type Eliom_sessions.volatile_table >> ->\\{{{   }}}  sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> 'a <<a_api text="session_data" | type Eliom_sessions.session_data >>>>>><<div class="info"|gets session data for the current session ~(if any~)~.\\
>>
<<div id="VALset_volatile_session_data" class="code"|<<span class="keyword"|val>> set~_volatile~_session~_data : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  table:'a <<a_api text="volatile_table" | type Eliom_sessions.volatile_table >> ->\\{{{   }}}  sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> 'a -> unit>>>><<div class="info"|sets session data for the current session~.\\
>>
<<div id="VALremove_volatile_session_data" class="code"|<<span class="keyword"|val>> remove~_volatile~_session~_data : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  table:'a <<a_api text="volatile_table" | type Eliom_sessions.volatile_table >> ->\\{{{   }}}  sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit>>>><<div class="info"|removes session data for the current session
   ~(but does not close the session~)~.
   ~If the session does not exist~, do nothing~.\\
>>
\\

===@@id="3_Persistentsessions"@@~Persistent sessions===
\\
<<div class="code" id="TYPEpersistent_table"|<<span class="keyword"|type>> <<span class="code type"|'a>> persistent~_table>>
<<div class="info"|~The type of persistent session data tables~.\\
>>

<<div id="VALcreate_persistent_table" class="code"|<<span class="keyword"|val>> create~_persistent~_table : <<span class="code type"|string -> 'a <<a_api text="persistent_table" | type Eliom_sessions.persistent_table >>>>>><<div class="info"|creates a table on hard disk where you can store the session data for
   all users~. ~It uses <<a_api | module Ocsipersist >>~.\\
>>
<<div id="VALget_persistent_session_data" class="code"|<<span class="keyword"|val>> get~_persistent~_session~_data : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  table:'a <<a_api text="persistent_table" | type Eliom_sessions.persistent_table >> ->\\{{{   }}}  sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> ->\\{{{   }}}  unit -> 'a <<a_api text="session_data" | type Eliom_sessions.session_data >> Lwt.t>>>><<div class="info"|gets persistent session data for the current persistent session ~(if any~)\\
>>
<<div id="VALset_persistent_session_data" class="code"|<<span class="keyword"|val>> set~_persistent~_session~_data : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  table:'a <<a_api text="persistent_table" | type Eliom_sessions.persistent_table >> ->\\{{{   }}}  sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> 'a -> unit Lwt.t>>>><<div class="info"|sets persistent session data for the current persistent session\\
>>
<<div id="VALremove_persistent_session_data" class="code"|<<span class="keyword"|val>> remove~_persistent~_session~_data : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  table:'a <<a_api text="persistent_table" | type Eliom_sessions.persistent_table >> ->\\{{{   }}}  sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit Lwt.t>>>><<div class="info"|removes session data for the current persistent session
   ~(but does not close the session~)~.
   ~If the session does not exist~, do nothing~.\\
>>
\\

==@@id="2_Closingsessions"@@~Closing sessions==
\\
<<div id="VALclose_session" class="code"|<<span class="keyword"|val>> close~_session : <<span class="code type"|\\{{{   }}}?close_group:bool ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit Lwt.t>>>><<div class="info"|~Close ~Eliom~'s current sessions if opened ~(service session~,
   volatile data session and persistent session~)~.\\


   ~Shortcut for <<a_api | val Eliom_sessions.close_volatile_data_session >> followed by
    <<a_api | val Eliom_sessions.close_service_session >> and
    <<a_api | val Eliom_sessions.close_persistent_data_session >>~.\\


    ~By default will close both secure and unsecure sessions~, but
    if <<span class='code'|~~secure>> is present~.\\
>>
<<div id="VALclose_volatile_session" class="code"|<<span class="keyword"|val>> close~_volatile~_session : <<span class="code type"|\\{{{   }}}?close_group:bool ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit>>>><<div class="info"|~Close ~Eliom~'s current volatile session if opened
   ~(both service session and volatile data session~)
   ~(destroying all session data for that user~)~.\\


   ~Shortcut for <<a_api | val Eliom_sessions.close_volatile_data_session >> followed by
    <<a_api | val Eliom_sessions.close_service_session >>~.\\
>>
<<div id="VALclose_persistent_data_session" class="code"|<<span class="keyword"|val>> close~_persistent~_data~_session : <<span class="code type"|\\{{{   }}}?close_group:bool ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit Lwt.t>>>><<div class="info"|~Close ~Eliom~'s current persistent session if opened
   ~(destroying all persistent data for that user~)\\
>>
<<div id="VALclose_volatile_data_session" class="code"|<<span class="keyword"|val>> close~_volatile~_data~_session : <<span class="code type"|\\{{{   }}}?close_group:bool ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit>>>><<div class="info"|~Close ~Eliom~'s current data session~, if opened
   ~(destroying all session data for that user~)\\
>>
<<div id="VALclose_service_session" class="code"|<<span class="keyword"|val>> close~_service~_session : <<span class="code type"|\\{{{   }}}?close_group:bool ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit>>>><<div class="info"|~Close ~Eliom~'s current service session~, if opened\\
>>
\\

==@@id="2_Administratingsessions"@@~Administrating sessions==
\\
<<div id="VALclose_all_sessions" class="code"|<<span class="keyword"|val>> close~_all~_sessions : <<span class="code type"|\\{{{   }}}?close_group:bool ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit Lwt.t>>>><<div class="info"|~Close all persistent and volatile sessions for one session name~.
    ~If the optional parameter <<span class='code'|~?session~_name>> ~(session name~) is not present~,
    the session with default name is closed~.\\


    //~Warning~: ~If you use this function after the initialisation phase~,
    you must give the <<span class='code'|~~sp>> parameter~, otherwise it will raise the
    exception <<a_api | exception Eliom_common.Eliom_function_forbidden_outside_site_loading >>~.//\\
>>
<<div id="VALclose_all_volatile_sessions" class="code"|<<span class="keyword"|val>> close~_all~_volatile~_sessions : <<span class="code type"|\\{{{   }}}?close_group:bool ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit Lwt.t>>>><<div class="info"|~Close all volatile ~(service and volatile data~) sessions
    for one session name~.
    ~If the optional parameter <<span class='code'|~?session~_name>> ~(session name~) is not present~,
    the session with default name is closed~.\\


    //~Warning~: ~If you use this function after the initialisation phase~,
    you must give the <<span class='code'|~~sp>> parameter~, otherwise it will raise the
    exception <<a_api | exception Eliom_common.Eliom_function_forbidden_outside_site_loading >>~.//\\
>>
<<div id="VALclose_all_persistent_data_sessions" class="code"|<<span class="keyword"|val>> close~_all~_persistent~_data~_sessions : <<span class="code type"|\\{{{   }}}?close_group:bool ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit Lwt.t>>>><<div class="info"|~Close all persistent sessions for one session name~.
    ~If the optional parameter <<span class='code'|~?session~_name>> ~(session name~) is not present~,
    the session with default name is closed~.\\


    //~Warning~: ~If you use this function after the initialisation phase~,
    you must give the <<span class='code'|~~sp>> parameter~, otherwise it will raise the
    exception <<a_api | exception Eliom_common.Eliom_function_forbidden_outside_site_loading >>~.//\\
>>
<<div id="VALclose_all_service_sessions" class="code"|<<span class="keyword"|val>> close~_all~_service~_sessions : <<span class="code type"|\\{{{   }}}?close_group:bool ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit Lwt.t>>>><<div class="info"|~Close all service sessions for one session name~.
    ~If the optional parameter <<span class='code'|~?session~_name>> ~(session name~) is not present~,
    the session with default name is closed~.\\


    //~Warning~: ~If you use this function after the initialisation phase~,
    you must give the <<span class='code'|~~sp>> parameter~, otherwise it will raise the
    exception <<a_api | exception Eliom_common.Eliom_function_forbidden_outside_site_loading >>~.//\\
>>
<<div id="VALclose_all_volatile_data_sessions" class="code"|<<span class="keyword"|val>> close~_all~_volatile~_data~_sessions : <<span class="code type"|\\{{{   }}}?close_group:bool ->\\{{{   }}}  ?session_name:string ->\\{{{   }}}  ?sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> unit Lwt.t>>>><<div class="info"|~Close all volatile data sessions for one session name~.
    ~If the optional parameter <<span class='code'|~?session~_name>> ~(session name~) is not present~,
    the session with default name is closed~.\\


    //~Warning~: ~If you use this function after the initialisation phase~,
    you must give the <<span class='code'|~~sp>> parameter~, otherwise it will raise the
    exception <<a_api | exception Eliom_common.Eliom_function_forbidden_outside_site_loading >>~.//\\
>>
<<div class="code"|<<span class="keyword"|module>> <<a_api text="Session_admin" | module Eliom_sessions.Session_admin >>: <<span class='code'|sig>><<a_api text=".." | module Eliom_sessions.Session_admin >><<span class='code'|end>>>>\\

==@@id="2_Gettingparameterslowlevel"@@~Getting parameters ~(low level~)==
\\
\\
~The usual way to get parameters with ~Eliom is to use the second
   and third parameters of the service handlers~.
   ~These are low level functions you may need for more advanced use~.\\
<<div id="VALget_get_params" class="code"|<<span class="keyword"|val>> get~_get~_params : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> (string * string) list>>>><<div class="info"|returns the parameters of the ~U~R~L ~(~G~E~T parameters~)
   that concern the running service~.
   ~For example in the case of a non~-attached coservice called from
   a page with ~G~E~T parameters~, only the parameters of that non~-attached
   coservice are returned ~(even if the other are still in the ~U~R~L~)~.\\
>>
<<div id="VALget_all_current_get_params" class="code"|<<span class="keyword"|val>> get~_all~_current~_get~_params : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> (string * string) list>>>><<div class="info"|returns current parameters of the ~U~R~L ~(~G~E~T parameters~)
   ~(even those that are for subsequent services~, but not previous actions~)\\
>>
<<div id="VALget_initial_get_params" class="code"|<<span class="keyword"|val>> get~_initial~_get~_params : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> (string * string) list>>>><<div class="info"|returns all parameters of the ~U~R~L ~(~G~E~T parameters~)
    as sent initially by the browser\\
>>
<<div id="VALget_other_get_params" class="code"|<<span class="keyword"|val>> get~_other~_get~_params : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> (string * string) list>>>><<div class="info"|returns the parameters of the ~U~R~L ~(~G~E~T parameters~)
   that do not concern the running service~.\\
>>
<<div id="VALget_post_params" class="code"|<<span class="keyword"|val>> get~_post~_params : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> (string * string) list Lwt.t>>>><<div class="info"|returns the parameters in the body of the ~H~T~T~P request ~(~P~O~S~T parameters~)
   that concern the running service\\
>>
<<div id="VALget_all_post_params" class="code"|<<span class="keyword"|val>> get~_all~_post~_params : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> (string * string) list>>>><<div class="info"|returns all parameters in the body of the ~H~T~T~P request ~(~P~O~S~T parameters~)
   ~(even those that are for another service~)\\
>>
\\

==@@id="2_Defaulttimeouts"@@~Default timeouts==
\\
<<div id="VALget_default_service_session_timeout" class="code"|<<span class="keyword"|val>> get~_default~_service~_session~_timeout : <<span class="code type"|unit -> float option>>>><<div class="info"|returns the default timeout for service sessions ~(server side~)~.
    ~The default timeout is common for all sessions for which no other value
    has been set~. ~At the beginning of the server~, it is taken from the
    configuration file~, ~(or set to default value~)~.
    <<span class='code'|~None>> ~= no timeout~.\\
>>
<<div id="VALget_default_volatile_data_session_timeout" class="code"|<<span class="keyword"|val>> get~_default~_volatile~_data~_session~_timeout : <<span class="code type"|unit -> float option>>>><<div class="info"|returns the default timeout for "volatile data" sessions ~(server side~)~.
    ~The default timeout is common for all sessions for which no other value
    has been set~. ~At the beginning of the server~, it is taken from the
    configuration file~, ~(or set to default value~)~.
    <<span class='code'|~None>> ~= no timeout~.\\
>>
<<div id="VALset_default_volatile_session_timeout" class="code"|<<span class="keyword"|val>> set~_default~_volatile~_session~_timeout : <<span class="code type"|float option -> unit>>>><<div class="info"|sets the default timeout for volatile ~(~= "in memory"~)
   sessions ~(i~.e~. both service session and volatile data session~)
   ~(server side~)~.
   <<span class='code'|~None>> ~= no timeout~.\\
>>
<<div id="VALset_default_service_session_timeout" class="code"|<<span class="keyword"|val>> set~_default~_service~_session~_timeout : <<span class="code type"|float option -> unit>>>><<div class="info"|sets the default timeout for service sessions~.
    <<span class='code'|~None>> ~= no timeout~.\\
>>
<<div id="VALset_default_volatile_data_session_timeout" class="code"|<<span class="keyword"|val>> set~_default~_volatile~_data~_session~_timeout : <<span class="code type"|float option -> unit>>>><<div class="info"|sets the default timeout for "volatile data" sessions ~(server side~)~.
    <<span class='code'|~None>> ~= no timeout~.\\
>>
<<div id="VALget_default_persistent_data_session_timeout" class="code"|<<span class="keyword"|val>> get~_default~_persistent~_data~_session~_timeout : <<span class="code type"|unit -> float option>>>><<div class="info"|returns the default timeout for sessions ~(server side~)~.
    ~The default timeout is common for all sessions for which no other value
    has been set~. ~At the beginning of the server~, it is taken from the
    configuration file~, ~(or set to default value~)~.
    <<span class='code'|~None>> ~= no timeout~.\\
>>
<<div id="VALset_default_persistent_data_session_timeout" class="code"|<<span class="keyword"|val>> set~_default~_persistent~_data~_session~_timeout : <<span class="code type"|float option -> unit>>>><<div class="info"|sets the default timeout for sessions ~(server side~)~.
    <<span class='code'|~None>> ~= no timeout~.\\
>>
\\

==@@id="2_Otherlowlevelfunctions"@@~Other low level functions==
\\
\\
~You probably don~'t need these functions~.\\
<<div id="VALget_ri" class="code"|<<span class="keyword"|val>> get~_ri : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> <<a_api text="Ocsigen_extensions.request_info" | type Ocsigen_extensions.request_info >>>>>><<div class="info"|returns all the information about the request~.\\
>>
<<div id="VALget_session_name" class="code"|<<span class="keyword"|val>> get~_session~_name : <<span class="code type"|sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> string option>>>><<div class="info"|returns the name of the sessions to which belongs the running service
    ~(<<span class='code'|~None>> if it is not a session service~)\\
>>
<<div id="VALget_persistent_data_session_cookie" class="code"|<<span class="keyword"|val>> get~_persistent~_data~_session~_cookie : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool ->\\{{{   }}}  sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> string option Lwt.t>>>><<div class="info"|returns the value of the ~Eliom~'s cookies for one persistent session~.
   ~Returns <<span class='code'|~None>> is no session is active~.\\
>>
<<div id="VALget_service_session_cookie" class="code"|<<span class="keyword"|val>> get~_service~_session~_cookie : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> string option>>>><<div class="info"|returns the value of ~Eliom~'s cookies for one service session~.
   ~Returns <<span class='code'|~None>> is no session is active~.\\
>>
<<div id="VALget_volatile_data_session_cookie" class="code"|<<span class="keyword"|val>> get~_volatile~_data~_session~_cookie : <<span class="code type"|\\{{{   }}}?session_name:string ->\\{{{   }}}  ?secure:bool -> sp:<<a_api text="server_params" | type Eliom_sessions.server_params >> -> unit -> string option>>>><<div class="info"|returns the value of ~Eliom~'s cookies for one "volatile data" session~.
   ~Returns <<span class='code'|~None>> is no session is active~.\\
>>
