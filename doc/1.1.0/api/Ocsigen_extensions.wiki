=Module <<a_api_type | module Ocsigen_extensions >> =
<<div class="code"|<<span class="keyword"|module>> Ocsigen_extensions: <<span class='code'|sig>><<a_api text=".." | module Ocsigen_extensions >><<span class='code'|end>>>>~Writing extensions for ~Ocsigen\\

----
<<div  id="EXCEPTIONOcsigen_http_error" class="code"|<<span class="keyword"|exception>> Ocsigen_http_error <<span class="keyword"|of>> <<span class="code type"|(<<a_api text="Ocsigen_http_frame.cookieset" | type Ocsigen_http_frame.cookieset >> * int)>>>>
<<div  id="EXCEPTIONOcsigen_Is_a_directory" class="code"|<<span class="keyword"|exception>> Ocsigen_Is_a_directory>>
<<div  id="EXCEPTIONOcsigen_malformed_url" class="code"|<<span class="keyword"|exception>> Ocsigen_malformed_url>>
<<div  id="EXCEPTIONOcsigen_Internal_Error" class="code"|<<span class="keyword"|exception>> Ocsigen_Internal_Error <<span class="keyword"|of>> <<span class="code type"|string>>>>
<<div  id="EXCEPTIONBad_config_tag_for_extension" class="code"|<<span class="keyword"|exception>> Bad_config_tag_for_extension <<span class="keyword"|of>> <<span class="code type"|string>>>>
<<div class="info"|~Try next extension\\
>>
<<div  id="EXCEPTIONError_in_config_file" class="code"|<<span class="keyword"|exception>> Error_in_config_file <<span class="keyword"|of>> <<span class="code type"|string>>>>
<<div class="info"|~Stop with an error message\\
>>
<<div id="VALbadconfig" class="code"|<<span class="keyword"|val>> badconfig : <<span class="code type"|('a, unit, string, 'b) Pervasives.format4 -> 'a>>>><<div class="info"|~Convenient function for raising ~Error~_in~_config~_file exceptions with
    a sprintf~-formatted argument~.\\
>>
<<div class="code" id="TYPEurl_path"|<<span class="keyword"|type>> url~_path = <<span class="code type"|string list>> >>
<<div class="info"|~The type of ~U~R~L paths~. <<span class='code'|~["plop"~;"plip"~]>> corresponds to <<span class='code'|plop~/plip>>~.\\
>>

<<div id="VALstring_of_url_path" class="code"|<<span class="keyword"|val>> string~_of~_url~_path : <<span class="code type"|<<a_api text="url_path" | type Ocsigen_extensions.url_path >> -> string>>>><<div class="code" id="TYPEvirtual_host_part"|<<span class="keyword"|type>> virtual~_host~_part = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Text>> <<span class="keyword"|of>> <<span class="code type"|string * int>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Wildcard>>|>>

<<div class="code" id="TYPEvirtual_hosts"|<<span class="keyword"|type>> virtual~_hosts = <<span class="code type"|(<<a_api text="virtual_host_part" | type Ocsigen_extensions.virtual_host_part >> list * int option) list>> >>

<<div class="code" id="TYPEfile_info"|<<span class="keyword"|type>> file~_info = { 
|@@class="typetable"@ @class="lefttop"@@{{{   }}}|@@class="lefttop"@@tmp_filename : <<span class="code type"|string>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Where the file is stored on the server|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@filesize : <<span class="code type"|int64>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Size~, in bytes|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@raw_original_filename : <<span class="code type"|string>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Original file name~, as given by the client~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@original_basename : <<span class="code type"|string>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Original file name|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|

}
>>
<<div class="info"|~The files sent in the request\\

~Note that the files are cancelled once the request has been fulfilled\\
>>

\\
~Only ~I~E is known to make <<span class='code'|raw~_original~_filename>> and
    <<span class='code'|original~_basename>> differ~, as it sends the full original path
    of uploaded files~.  ~In all cases~, <<span class='code'|original~_basename>> is the
    basename of the file~. ~More precisely~, it is the part of the
    filename after the last <<span class='code'|~/>> or <<span class='code'|~\ >>~, if any~, or <<span class='code'|"none">> if one of
    these characters is the last one~. ~You should probably never use
    <<span class='code'|raw~_original~_filename>>~.\\
<<div class="code" id="TYPEclient"|<<span class="keyword"|type>> client>>
<<div class="info"|~A value of this type represents the client who did the request~.\\
>>

<<div id="VALclient_id" class="code"|<<span class="keyword"|val>> client~_id : <<span class="code type"|<<a_api text="client" | type Ocsigen_extensions.client >> -> int>>>><<div class="info"|~Returns the id number of the connection\\
>>
<<div id="VALclient_connection" class="code"|<<span class="keyword"|val>> client~_connection : <<span class="code type"|<<a_api text="client" | type Ocsigen_extensions.client >> -> <<a_api text="Ocsigen_http_com.connection" | type Ocsigen_http_com.connection >>>>>><<div class="info"|~Returns the connection\\
>>
<<div class="code" id="TYPErequest_info"|<<span class="keyword"|type>> request~_info = { 
|@@class="typetable"@ @class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_url_string : <<span class="code type"|string>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@full ~U~R~L|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_url : <<span class="code type"|Neturl.url>>;|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_method : <<span class="code type"|<<a_api text="Ocsigen_http_frame.Http_header.http_method" | type Ocsigen_http_frame.Http_header.http_method >>>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~G~E~T~, ~P~O~S~T~, ~H~E~A~D~.~.~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_protocol : <<span class="code type"|<<a_api text="Ocsigen_http_frame.Http_header.proto" | type Ocsigen_http_frame.Http_header.proto >>>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~H~T~T~P protocol used by client ~(~1~.~0 or ~1~.~1~)|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_ssl : <<span class="code type"|bool>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@true if ~H~T~T~P~S~, false if ~H~T~T~P|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_full_path_string : <<span class="code type"|string>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@full path of the ~U~R~L|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_full_path : <<span class="code type"|string list>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@full path of the ~U~R~L|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_sub_path : <<span class="code type"|string list>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@path of the ~U~R~L ~(only part concerning the site~)|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_sub_path_string : <<span class="code type"|string>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@path of the ~U~R~L ~(only part concerning the site~)|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_get_params_string : <<span class="code type"|string option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@string containing ~G~E~T parameters|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_host : <<span class="code type"|string option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Host field of the request ~(if any~)|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_get_params : <<span class="code type"|(string * string) list Lazy.t>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Association list of get parameters|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_initial_get_params : <<span class="code type"|(string * string) list Lazy.t>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Association list of get parameters~, as sent by the browser ~(must not be modified by extensions~)|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_post_params : <<span class="code type"|(string * string) list Lwt.t Lazy.t>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Association list of post parameters|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_files : <<span class="code type"|(string * <<a_api text="file_info" | type Ocsigen_extensions.file_info >>) list Lwt.t Lazy.t>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Files sent in the request|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_remote_inet_addr : <<span class="code type"|Unix.inet_addr>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~I~P of the client|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_remote_ip : <<span class="code type"|string>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~I~P of the client|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_remote_ip_parsed : <<span class="code type"|Ocsigen_lib.ip_address Lazy.t>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~I~P of the client~, parsed|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_remote_port : <<span class="code type"|int>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Port used by the client|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_server_port : <<span class="code type"|int>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Port of the request ~(server~)|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_user_agent : <<span class="code type"|string>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~User~_agent of the browser|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_cookies_string : <<span class="code type"|string option Lazy.t>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Cookies sent by the browser|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_cookies : <<span class="code type"|string Ocsigen_http_frame.Cookievalues.t Lazy.t>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Cookies sent by the browser|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_ifmodifiedsince : <<span class="code type"|float option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@if~-modified~-since field|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_ifunmodifiedsince : <<span class="code type"|float option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@if~-unmodified~-since field|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_ifnonematch : <<span class="code type"|string list>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@if~-none~-match field ~( ~* and weak entity tags not implemented~)|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_ifmatch : <<span class="code type"|string list option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@if~-match field ~( ~* not implemented~)|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_content_type : <<span class="code type"|((string * string) * (string * string) list) option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Content~-~Type ~H~T~T~P header|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_content_type_string : <<span class="code type"|string option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Content~-~Type ~H~T~T~P header|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_content_length : <<span class="code type"|int64 option>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Content~-~Length ~H~T~T~P header|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_referer : <<span class="code type"|string option Lazy.t>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Referer ~H~T~T~P header|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_accept : <<span class="code type"|\\{{{   }}}((string option * string option) * float option * (string * string) list)\\{{{   }}}  list Lazy.t>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Accept ~H~T~T~P header~. ~For example <<span class='code'|~(~Some "text"~, ~None~)>> means <<span class='code'|"text~/~*">>~. ~The float is the "quality" value~, if any~. ~The last association list is for other extensions~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_accept_charset : <<span class="code type"|(string option * float option) list Lazy.t>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Accept~-~Charset ~H~T~T~P header~. <<span class='code'|~None>> for the first value means "~*"~. ~The float is the "quality" value~, if any~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_accept_encoding : <<span class="code type"|(string option * float option) list Lazy.t>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Accept~-~Encoding ~H~T~T~P header~. <<span class='code'|~None>> for the first value means "~*"~. ~The float is the "quality" value~, if any~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_accept_language : <<span class="code type"|(string * float option) list Lazy.t>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Accept~-~Language ~H~T~T~P header~. ~The float is the "quality" value~, if any~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_http_frame : <<span class="code type"|<<a_api text="Ocsigen_http_frame.t" | type Ocsigen_http_frame.t >>>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The full http~_frame|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_extension_info : <<span class="code type"|exn list>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Use this to put anything you want~,
                                      for example~, information for subsequent
                                      extensions|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@{{{   }}}|@@class="lefttop"@@ri_client : <<span class="code type"|<<a_api text="client" | type Ocsigen_extensions.client >>>>;|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~The request connection|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|

}
>>
<<div class="info"|~The request\\
>>

\\
~If you force <<span class='code'|ri~_files>> or <<span class='code'|ri~_post~_params>>~, the request is fully read~,
   so it is not possible any more to read it from <<span class='code'|ri~_http~_frame>>
   ~(and vice versa~)~.\\
<<div class="code" id="TYPEanswer"|<<span class="keyword"|type>> answer = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Ext_found>> <<span class="keyword"|of>> <<span class="code type"|(unit -> <<a_api text="Ocsigen_http_frame.result" | type Ocsigen_http_frame.result >> Lwt.t)>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@"~O~K stop! ~I will take the page~.
          ~You can start the following request of the same pipelined connection~.
          ~Here is the function to generate the page"~.
          ~The extension must return ~Ext~_found as soon as possible
          when it is sure it is safe to start next request~.
          ~Usually as soon as you know tha the result will be ~Ext~_found~.
          ~But in some case~, for example proxies~, you don~'t want the request of
          one connection to be handled in different order~.
          ~In that case~, wait to be sure that the new request will not
          overtake this one~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Ext_next>> <<span class="keyword"|of>> <<span class="code type"|int>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Page not found~. ~Try next extension~.
                        ~The integer is the ~H~T~T~P error code~.
                        ~It is usally ~4~0~4~, but may be for ex ~4~0~3 ~(forbidden~)
                        if you want another extension to try after a ~4~0~3~.
                        ~Same as ~Ext~_continue~_with but does not change
                        the request~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Ext_stop_site>> <<span class="keyword"|of>> <<span class="code type"|(<<a_api text="Ocsigen_http_frame.cookieset" | type Ocsigen_http_frame.cookieset >> * int)>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Error~. ~Do not try next extension~, but
                        try next site~.
                        ~The integer is the ~H~T~T~P error code~, usally ~4~0~3~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Ext_stop_host>> <<span class="keyword"|of>> <<span class="code type"|(<<a_api text="Ocsigen_http_frame.cookieset" | type Ocsigen_http_frame.cookieset >> * int)>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Error~. ~Do not try next extension~,
                        do not try next site~,
                        but try next host~.
                        ~The integer is the ~H~T~T~P error code~, usally ~4~0~3~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Ext_stop_all>> <<span class="keyword"|of>> <<span class="code type"|(<<a_api text="Ocsigen_http_frame.cookieset" | type Ocsigen_http_frame.cookieset >> * int)>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Error~. ~Do not try next extension ~(even filters~)~,
                        do not try next site~,
                        do not try next host~,
                        do not ~.
                        ~The integer is the ~H~T~T~P error code~, usally ~4~0~3~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Ext_continue_with>> <<span class="keyword"|of>> <<span class="code type"|(<<a_api text="request_info" | type Ocsigen_extensions.request_info >> * <<a_api text="Ocsigen_http_frame.cookieset" | type Ocsigen_http_frame.cookieset >> * int)>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Used to modify the request before giving it to next extension~.
            ~The extension returns the request~_info ~(possibly modified~)
            and a set of cookies if it wants to set or cookies
            ~(<<span class='code'|!~Ocsigen~_http~_frame~.~Cookies~.empty>> for no cookies~)~.
            ~You must add these cookies yourself in request~_info if you
            want them to be seen by subsequent extensions~,
            for example using <<a_api | val Ocsigen_http_frame.compute_new_ri_cookies >>~.
            ~The integer is usually equal to the error code received
            from preceding extension ~(but you may want to modify it~)~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Ext_retry_with>> <<span class="keyword"|of>> <<span class="code type"|<<a_api text="request_info" | type Ocsigen_extensions.request_info >> * <<a_api text="Ocsigen_http_frame.cookieset" | type Ocsigen_http_frame.cookieset >>>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Used to retry all the extensions with a new request~_info~.
            ~The extension returns the request~_info ~(possibly modified~)
            and a set of cookies if it wants to set or cookies
            ~(<<span class='code'|!~Ocsigen~_http~_frame~.~Cookies~.empty>> for no cookies~)~.
            ~You must add these cookies yourself in request~_info if you
            want them to be seen by subsequent extensions~,
            for example using <<a_api | val Ocsigen_http_frame.compute_new_ri_cookies >>~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Ext_sub_result>> <<span class="keyword"|of>> <<span class="code type"|<<a_api text="extension2" | type Ocsigen_extensions.extension2 >>>>|@@class="typefieldcomment lefttop startcom"@@{{{(*}}}|@@class="typefieldcomment lefttop"@@~Used if your extension want to define option that may contain
            other options from other extensions~.
            ~In that case~, while parsing the configuration file~, call
            the parsing function ~(of type <<span class='code'|parse~_fun>>~)~,
            that will return something of type <<span class='code'|extension~2>>~.|@@class="typefieldcomment leftbottom endcom"@@{{{*)}}}|>>

<<div class="code" id="TYPErequest_state"|<<span class="keyword"|type>> request~_state = 
|@@class="typetable"@ @class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Req_not_found>> <<span class="keyword"|of>> <<span class="code type"|(int * <<a_api text="request_info" | type Ocsigen_extensions.request_info >>)>>|
|@@class="lefttop"@@<<span class="keyword"|{{{|}}}>>|@@class="lefttop"@@<<span class="constructor"|Req_found>> <<span class="keyword"|of>> <<span class="code type"|(<<a_api text="request_info" | type Ocsigen_extensions.request_info >> * (unit -> <<a_api text="Ocsigen_http_frame.result" | type Ocsigen_http_frame.result >> Lwt.t))>>|>>

<<div class="code" id="TYPEextension2"|<<span class="keyword"|type>> extension~2 = <<span class="code type"|\\{{{   }}}(unit -> unit) ->\\{{{   }}}  <<a_api text="Ocsigen_http_frame.cookieset" | type Ocsigen_http_frame.cookieset >> ->\\{{{   }}}  <<a_api text="request_state" | type Ocsigen_extensions.request_state >> ->\\{{{   }}}  (<<a_api text="answer" | type Ocsigen_extensions.answer >> * <<a_api text="Ocsigen_http_frame.cookieset" | type Ocsigen_http_frame.cookieset >>) Lwt.t>> >>

<<div class="code" id="TYPEextension"|<<span class="keyword"|type>> extension = <<span class="code type"|<<a_api text="request_state" | type Ocsigen_extensions.request_state >> -> <<a_api text="answer" | type Ocsigen_extensions.answer >> Lwt.t>> >>
<<div class="info"|~For each ~<site~> tag in the configuration file~,
    you can set the extensions you want~.
    ~Each extension is implemented as a function~, taking
    the charset found in configuration file~,
    the current state of the request~,
    and returning an answer~.
    ~If no page has been generated so far ~(<<span class='code'|~Req~_not~_found>>~)~, it receive
    the error code given by the previous extension ~(default ~4~0~4~)~,
    and the request information~.
    ~If a page has been generated by previous extensions ~(case <<span class='code'|~Req~_found>>~)~,
    the extension may want to modify the result ~(filters~)~.\\
>>

<<div class="code" id="TYPEparse_fun"|<<span class="keyword"|type>> parse~_fun = <<span class="code type"|<<a_api text="Simplexmlparser.xml" | type Simplexmlparser.xml >> list -> <<a_api text="extension2" | type Ocsigen_extensions.extension2 >>>> >>

<<div class="code" id="TYPEparse_host"|<<span class="keyword"|type>> parse~_host>>

<<div id="VALregister_extension" class="code"|<<span class="keyword"|val>> register~_extension : <<span class="code type"|\\{{{   }}}?respect_pipeline:bool ->\\{{{   }}}  (<<a_api text="virtual_hosts" | type Ocsigen_extensions.virtual_hosts >> ->\\{{{   }}}   <<a_api text="url_path" | type Ocsigen_extensions.url_path >> ->\\{{{   }}}   string * string * int * int ->\\{{{   }}}   <<a_api text="parse_host" | type Ocsigen_extensions.parse_host >> ->\\{{{   }}}   <<a_api text="parse_fun" | type Ocsigen_extensions.parse_fun >> ->\\{{{   }}}   <<a_api text="Simplexmlparser.xml" | type Simplexmlparser.xml >> -> <<a_api text="extension" | type Ocsigen_extensions.extension >>) ->\\{{{   }}}  (<<a_api text="virtual_hosts" | type Ocsigen_extensions.virtual_hosts >> ->\\{{{   }}}   <<a_api text="url_path" | type Ocsigen_extensions.url_path >> ->\\{{{   }}}   string * string * int * int ->\\{{{   }}}   <<a_api text="parse_host" | type Ocsigen_extensions.parse_host >> ->\\{{{   }}}   <<a_api text="parse_fun" | type Ocsigen_extensions.parse_fun >> ->\\{{{   }}}   <<a_api text="Simplexmlparser.xml" | type Simplexmlparser.xml >> -> <<a_api text="extension" | type Ocsigen_extensions.extension >>) ->\\{{{   }}}  (unit -> unit) -> (unit -> unit) -> (exn -> string) -> unit>>>><<div class="info"|~For each extension generating pages~, we register four functions~:* a function taking
   ** the name of the virtual ~<host~>


     that will be called for each ~<host~>~,
     and that will generate a function taking~:
   ** the path attribute of a ~<site~> tag


     that will be called for each ~<site~>~,
     and that will generate a function taking~:
   ** an item of the config file


     that will be called on each tag inside ~<site~> and~:
   ** raise <<span class='code'|~Bad~_config~_tag~_for~_extension>> if it does not recognize that tag
** return something of type <<span class='code'|extension>> ~(filter or page generator~)


* a function of same type~, that will be called every time user configuration
    files are parsed ~(if userconf is enabled~)~.
    ~It must define only safe options~, for example it is not
    safe to allow such options to load a cmo specified by a user~, or to
    execute a program~, as this program will be executed by ocsigen~'s user~.
    ~Note that function will be called for every request~, whereas the first one
    is called only when starting or reloading the server~.
    ~If you do not want to allow users to use your extension~,
    use the predefined function <<span class='code'|void~_extension>> ~(defines no option~)~.
* a function that will be called at the beginning
   of the initialisation phase ~(each time the config file is reloaded~)
   ~(~Note that the extensions are not reloaded~)
* a function that will be called at the end of the initialisation phase
   of the server
* a function that will create an error message from the exceptions
   that may be raised during the initialisation phase~, and raise again
   all other exceptions


   ~If the optional parameter <<span class='code'|~?respect~_pipeline>> is <<span class='code'|true>>~, the extension
   will ask the server to respect the order of the pipeline~. ~That means that
   it will wait to be sure that the previous request from the same connection
   has been taken by an extension before giving a request to an extension~.
   ~Use this to write proxies extensions~, when you want to be able to pipeline
   the requests you to another server~. ~It is false by default~.\\
>>
<<div id="VALvoid_extension" class="code"|<<span class="keyword"|val>> void~_extension : <<span class="code type"|\\{{{   }}}<<a_api text="virtual_hosts" | type Ocsigen_extensions.virtual_hosts >> ->\\{{{   }}}  <<a_api text="url_path" | type Ocsigen_extensions.url_path >> ->\\{{{   }}}  string * string * int * int ->\\{{{   }}}  <<a_api text="parse_host" | type Ocsigen_extensions.parse_host >> ->\\{{{   }}}  <<a_api text="parse_fun" | type Ocsigen_extensions.parse_fun >> ->\\{{{   }}}  <<a_api text="Simplexmlparser.xml" | type Simplexmlparser.xml >> -> <<a_api text="extension" | type Ocsigen_extensions.extension >>>>>><<div class="info"|~A predefined function to be passed to <<a_api | val Ocsigen_extensions.register_extension >>
    that defines no option~.\\
>>
<<div id="VALget_config" class="code"|<<span class="keyword"|val>> get~_config : <<span class="code type"|unit -> <<a_api text="Simplexmlparser.xml" | type Simplexmlparser.xml >> list>>>><<div class="info"|~While loading an extension~,
    get the configuration tree between ~<dynlink~>~<~/dynlink~>\\
>>
<<div id="VALri_of_url" class="code"|<<span class="keyword"|val>> ri~_of~_url : <<span class="code type"|string -> <<a_api text="request_info" | type Ocsigen_extensions.request_info >> -> <<a_api text="request_info" | type Ocsigen_extensions.request_info >>>>>><<div class="info"|~Parsing ~U~R~Ls~.
   ~This allows to modify the ~U~R~L in the request~_info~.
   ~(to be used for example with ~Ext~_retry~_with or ~Ext~_continue~_with~)\\
>>
\\
~User directories\\
<<div class="code" id="TYPEud_string"|<<span class="keyword"|type>> ud~_string>>
<<div class="info"|~The type for string that may contain a ~$u~(~.~.~.~)\\
>>

<<div id="VALparse_user_dir" class="code"|<<span class="keyword"|val>> parse~_user~_dir : <<span class="code type"|string -> <<a_api text="ud_string" | type Ocsigen_extensions.ud_string >>>>>><<div id="VALreplace_user_dir" class="code"|<<span class="keyword"|val>> replace~_user~_dir : <<span class="code type"|Netstring_pcre.regexp -> <<a_api text="ud_string" | type Ocsigen_extensions.ud_string >> -> string -> string>>>><<div class="info"|raises <<span class='code'|~Not~_found>> is the directory does not exist\\
>>
